	.TITLE GONOGO- DELUXE ASTEROIDS GO/NO-GO TEST
	.RADIX 16
	.ENABL AMA
	.LIST MEB
	.NLIST BYT,CND
;*******************************
;*
;* THIS PROGRAM RESIDES IN THE UPPER 2K OF PROGRAM SPACE
;* IT PERFORMS POWER ON RESET PROCESSING
;* AS WELL AS SELF-TEST. SEE DSTRD0.MAC FOR HARDWARE
;* CONFIGURATION
;*
;*******************************
	.SBTTL ****************************
	.SBTTL *
	.SBTTL *PROGRAMMER: DAVE SHEPPERD
	.SBTTL *
	.SBTTL ****************************
;
;ENTRY POINTS
;
	.GLOBL PWRON,VGADD2,VGAWT
	
;
;EXTERNAL ENTRY POINTS
;
	.GLOBL TEST1,BNKERR,ERASE		;SELF TEST X-Y PATTERN
	.GLOBL VGHALT,VGVCTR,VGRTSL,VGMSGA	;UTILITY X-Y ROUTINES
	.GLOBL VGJMPL,VGJSRL,VGLABS,VGADD
	.GLOBL VGWAIT,VGSABS,VGHEX,VGHEXZ,VGCHAR
;
;PAGE 0 CELLS USED EXTERNALLY
;
	.GLOBL XCOMP,VGSIZE,VGLIST,VGBRIT,TEMP1

$DAST=1
$DTHST=0
	
	
	.INCLUDE DSTDEC		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	.MACRO .BR TARGET
	.IIF NE,TARGET-.,.ERROR ;BRANCH FAILURE
	.ENDM
	.ASECT
	.INCLUDE PG0123		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.CSECT GONOGO
	.PAGE
	.SBTTL	VGADD2 (ADD 2 BYTES TO LIST, UPDATE VGLIST)
;VGADD2-ADD 2 WORDS TO VECTOR LIST
;
;ENTRY	(A)=FIRST BYTE
;	(X)=SECOND BYTE
;EXIT	(VGLIST,VGLIST+1)=NEW VECTOR LIST POINTER
;USES	A,Y

VGADD2:	LDY I,0
	STA NY,VGLIST
	INY
	TXA
	STA NY,VGLIST
	JMP VGADD		;UPDATE VECTOR POINTER

	.SBTTL PWRON RESET ENTRY
PWRON:	LDX #-2
	TXS			;SET STACK
	CLD			;IN BINARY MODE
	LDX #0			;WE HAVE 5.33MS TO CHECK PAGE 1
	STX POKEY+0F

	.SBTTL RAM TEST

11$:	LDA #11			;2 2114'S
10$:	STA X,100
	TAY			;SAVE CODE
	EOR X,100		;WORK?
	BNE 70$			;NO
	TYA
	ASL			;SHIFT PATTERN
	BCC 10$
	TXA
	STA X,0
	STA X,100
	STA X,200
	STA X,300
	STA X,4000
	STA X,4100
	STA X,4200
	STA X,4300
	STA X,4400
	STA X,4500
	STA X,4600
	STA X,4700
	DEX
	BNE 11$			;256 BYTES (TAKES 25.3MS)
	STA WTDOG		;DON'T LET WATCHDOG TIME OUT
12$:	TXA
16$:	EOR X,100		;ADDR MATCH?
	BNE 70$			;NO
	STA X,100		;COVER OUR TRACKS
	INX
	BIT STSTSW		;IN SELF-TEST?
	BPL 13$			;NO
	TXA			;YES. CHECK IT ALL
	BNE 16$
	BEQ 14$
13$:	CPX #0FB		;NMI'S ARE RUNNING. DON'T CKECK IT ALL
	BCC 12$
	LDX #0			;NOW CHECK PAGE 0
14$:	TXA
	EOR X,0			;ADDR MATCH?
	BNE 70$			;NO
	LDA #11			;TRY INDIVIDUAL BITS
15$:	STA X,0
	TAY			;SAVE BIT PATTERN
	EOR X,0			;WORK?
70$:	BNE P0123E		;BAD
	TYA
	ASL			;NEXT BIT
	BCC 15$
	LDY #0			;COVER OUR TRACKS
	STY X,0
	DEX
	BNE 14$

PG010K:	STA WTDOG		;PAGES 0 & 1 ARE GOOD
	LDA #2			;CHECK PGS 2,3
35$:	STA 1
40$:	TYA
	EOR NY,0		;ADDRESS MATCH?
	BNE P4000E		;NO
	LDA #11			;TEST EACH BIT INDIVIDUALY
10$:	STA NY,0
	TAX			;SAVE PATTERN
	EOR NY,0		;MATCH?
	BNE P4000E		;NO
	STA NY,0		;COVER OUR TRACKS
	TXA
	ASL
	BCC 10$
	INY
	BNE 40$			;NEXT LOCATION TO TEST
	STA A,WTDOG		;NO BARKING NOW
	INC 1
	LDX 1
	CPX I,04
	BCC 40$			;NEXT PAGE TO TEST
	LDA I,40
	CPX I,40
	BCC 35$			;TEST 2K OF RAM AT 4000
	CPX I,48
	BCC 40$			;MORE OF 2K BLOCK LEFT
	BCS STEST3		;RAM IS GOOD
	.PAGE
	.SBTTL RAM ERROR HANDLER
CKSUM5::.BYTE 0
P0123E:	LDY I,0			;ERROR IN FIRST 1K
	BEQ STEST1

P4000E:	LDY I,0
	LDX 1
	CPX I,04
	BCC STEST1		;IF ERROR IN FIRST 1K OF RAM
	INY
	CPX I,44
	BCC STEST1		;ERROR IN SECOND 1K RAM
	INY			;ERROR MUST BE IN THIRD 1K RAM
STEST1:	CMP I,10		;SET TO 1,2 OR 3
	ROL
	AND I,1F
	CMP I,02
	ROL			;EACH 1 REPRESENTS A BAD 2114
	AND I,03
15$:	DEY
	BMI 20$			;IF THIS 1K BLOCK WAS BAD
	ASL			;FLAG 2 RAM IC'S AS GOOD
	ASL
	BCC 15$			;ALWAYS

20$:	LSR
	LDY #7
	STY POKEY+0F
	LDX #20			;HIGH FREQ (IF CHIP GOOD)
	BCC 25$			;IF RAM IC IS GOOD
	LDX #80			;LOW FREQ
25$:	STX POKEY
	LDX #0A8
	STX POKEY+1
	LDX I,0
31$:	BIT A,THRKHZ		;COUNT 1 3KHZ SIGNAL
	BPL 31$
32$:	BIT A,THRKHZ
	BMI 32$
	DEX
	STA A,WTDOG		;NOW NOT
	BNE 31$			;COUNT FOR 256/3000 OF A SECOND
	DEY
	BPL 31$			;8*256/3000 OF A SECOND
	STX POKEY+1		;TURN OFF SOUND
	LDY I,08
35$:	BIT A,THRKHZ		;COUNT 3KHZ SIGNALS
	BPL 35$
36$:	BIT A,THRKHZ
	BMI 36$
	DEX
	STA A,WTDOG		;NOT NOW
	BNE 35$			;COUNT TIL 256/3000 OF A SECOND
	DEY
	BNE 35$			;COUNT TIL 8*256/3000 SECONDS
	TAX			;SET FLAGS
	BNE 20$			;MORE TO COME
STOP:	STA A,WTDOG		;NO BITING NOW
	LDA A,STSTSW
	BMI STOP		;WAIT UNTIL STEST SWITCH IS PUSHED
10$:	BPL 10$			;START ALL OVER - WITH WATCHDOG

	.SBTTL ROM CHECKSUM

STEST3:	LDA I,0			;CKSUM ALL ROMS
	TAY
	TAX
	LDA I,48
5$:	STA Z,TEMP1+1
	LDA I,7			;8 PAGES TO TEST
	STA Z,TEMP2
	LDA I,55		;STARTING PATTERN
	CLC
10$:	ADC NY,TEMP1
	INY
	BNE 10$			;DO ONE PAGE
	INC Z,TEMP1+1
	DEC Z,TEMP2
	BPL 10$			;DO 8 PAGES
	STA ZX,R0		;STORE 6 CKSUMS STARTING AT R0
	ORA CKERR		;KEEP ERROR FLAGS
	STA CKERR
	INX
	STA A,WTDOG		;WHAT HAVE YOU BEEN TYPING ON THESE, LINDA?
	LDA Z,TEMP1+1
	CMP I,58
	BCC 5$			;CKSUM 4800 TO 5800
	BNE 20$			;THEN SKIP TO 6000
	LDA I,60
20$:	CMP I,80
	BCC 5$			;CKSUM 6000 TO 8000
	STA A,300		;200=0 AND 300=80
	STA BNKSEL		;SWITCH TO PLAYER 2
	CMP A,200
	BEQ 25$			;BANK SELECT APPEARS OK
	INC XT			;ERROR
25$:	LDA A,300
	BEQ 26$
	INC XT			;ERROR
26$:	INC EAFLG		;START EAROM TEST
	LDA #7
	STA POKEY+0F
	.BR STEST5
	.PAGE
	.SBTTL DISPLAY HANDLER
	.GLOBL SND.T1,SNDON,VTST,PKYERR,SCALET,SCLSIZ
STEST5:	LDA I,10
	STA Z,VGSIZE		;SET CHARACTER SIZE
	STA BNKSEL		;SWITCH TO PLAYER 1 CONTROLS
	STA 01FF		;ENABLE NMI ROUTINE
	STA NPLAYR		;ENABLE SOUND ROUTINE
	BIT STSTSW		;SELF-TEST SWITCH ON?
	BPL 1$			;NOPE. OK
	JMP VTST		;GO TO VG TEST PROCEDURE

;(R0-R5)=6 CHECKSUMS FOR THE ROMS
;(CKERR)=COMPOSITE ERROR
;(TEMP4+1)=ZERO IF NO BANK SELECT ERROR

1$:	LSR SYNC		;WAIT FOR SYNC
	BCC 1$
8$:	BIT A,HALT		;WAIT FOR HALT
	BMI 8$			;WATCHDOG WILL RESET IF VECTOR GENERATOR IS LOST
	STA A,WTDOG
	LDA #VECRAM/100
	STA VGLIST+1
	LDY #0

2$:	LDA Y,SCALET		;PUT IN SCALE TEST
	STA Y,VECRAM
	INY
	CPY #SCLSIZ		;END?
	BCC 2$			;NOPE
	STY VGLIST		;UPDATE POINTER
	
STEST6:	LDA Z,XT
	BEQ 30$
	LXL BNKERR
	LAH BNKERR
	JSR VGJSRL		;JSRL BNKERR FOR BANK SELECT ERROR 
30$:	LDX I,600./4
	STX TEMP2+1		;STARTING Y VALUE FOR CHECKSUMS
	LDX I,5
32$:	LDA ZX,R0
	BEQ 35$
	STX TEMP2		;SAVE X
	LDX TEMP2+1
	TXA
	SEC
	SBC I,08		;32 BELOW CURRENT LINE
	STA TEMP2+1		;SAVE POSITION FOR NEXT LINE
	LDA I,128./4
	JSR VGAWT
	LDX TEMP2
	LDY X,ROMX		;GET X ADDRESS OF ROM
	JSR VGCHAR		;DISPLAY
	LDX TEMP2
	LDY X,ROMY		;GET Y ADDRESS OF ROM
	JSR VGCHAR		;DISPLAY
	LDX TEMP2
35$:	DEX
	BPL 32$			;LOOP THRU ALL CHECKSUMS
	LAH TEST1
	LXL TEST1
	JSR VGJSRL		;JSRL TO TEST PATTERN
	LDA I,93
	LDX I,0A0
	JSR VGAWT		;POSITION BEAM
	LDX I,0			;NO NEED TO WAIT
28$:	LDA AX,OPTN1		;GO FROM SW1 TO SW8
	AND I,3
	ASL TEMP2
	ASL TEMP2
	ORA TEMP2
	STA TEMP2
	INX
	CPX #4			;END?
	BCC 28$			;NOPE
	JSR N8			;DISPLAY 8 BINARY DIGITS

	LDA #93			;X POSITION
	LDX #0B0			;Y POSITION
	JSR VGAWT		;POSITION
	LDA HOLE		;POKEY OPTION SWITCHES
	STA TEMP2
	JSR N8			;DISPLAY 8 BINARY DIGITS
27$:	JSR PKYTST		;ANY POKEY ERRORS?
	TAX
	BEQ 25$			;NO
	LXH PKYERR
	LAL PKYERR
	JSR VGADD2
25$:	INC FRAME
	LDA $INTCT
	STA SLMP1		;BLINK START LAMPS
	ASL
	STA SLMP2		;AT DIFFERENT SPEEDS
	.BR STEST7

	.CSECT D0
N8:	JSR 1$		;DO THE FOLLOWING 8 TIMES
1$:	JSR 2$
2$:	JSR 4$
4$:	ASL TEMP2	;DISPLAY CONTENTS OF TEMP2 IN BINARY
	LDA #0
	ADC #1
	ASL
	TAY
	JMP VGCHAR
	.CSECT GONOGO
	.PAGE
	.SBTTL SWITCH TEST

STEST7:	LDY #0
	JSR SWCH		;GET PLAYER SWITCHES
;	LDA ASTERS+3		;GET DIFFERENCE BITS
	ORA ASTERS+2
	ORA ASTERS+1
	ORA ASTERS+0
	BEQ 25$			;NO DIFFERENCES

	LDY #SND.T1		;THUMP SOUND FOR SWITCH CLOSURE
	JSR SNDON

25$:	LSR BNKSEL
	LDX #EATMSG		;ASSUME STILL TESTING EAROM
	LDA EAFLG		;TRUE?
	BNE 30$			;YEP
	LDX #EAGOOD		;ASSUME EAROM GOOD
	LDA PROT		;TRUE?
	BEQ 30$			;YEP
	LDX #EABADM		;NOPE. BAD ROM

30$:	JSR MESSGE		;DISPLAY MESSAGE

	.BR STEST8

	.CSECT D0
SWCH:	JSR 1$			;DO THE FOLLOWING TWICE

1$:	LDX #7			;PUT 8 SWITCHES INTO ACC
2$:	ROL X,$COINA		;M TO L =RL/RR/TH/S2/S1/CR/CC/CL
	ROL
	DEX
	BPL 2$
	JSR 4$			;COMPUTE DIFFERENCES

	LDX #4			;PUT 5 SWITCHES INTO ACC
3$:	ROL X,HYPSW		;M TO L = SHLD/FIRE/DIA.STP./SLAM/SELFT/X/X/X
	ROR
	DEX
	BPL 3$
	AND #0D0		;ZAP UNUSED BITS
	STX BNKSEL		;SWITCH TO PLAYER 2 FOR NEXT TIME

	LDX #40.
5$:	DEX			;WAIT
	BPL 5$
4$:	TAX			;SAVE SWITCHES FOR A SEC.
	EOR Y,R6		;COMPUTE DIFFERENCES
	STA Y,ASTERS		;SAVE DIFFERENCES
	STX Y,R6		;SAVE NEW READINGS
	INY			;UP TO NEXT VARIABLES FOR NEXT TIME
	RTS			;RECURSE/EXIT AS RQD.

	.CSECT GONOGO
	.PAGE
	.SBTTL SWITCH SEQUENCE TEST

SWSQ	=HSCORE

STEST8:	LDA R7			;RE-ARANGE SWITCH INPUT BITS TO FIT
	STA ASTERS+1		;INTO 16 BIT ARRAY
	ASL
	EOR ASTERS+1
	AND #30
	EOR ASTERS+1
	STA ASTERS+1		;=SHIELD/FIRE/SLAM/0/0/0/0/0
	LDA R6
	STA ASTERS
	LDA R9
	STA ASTERS+3
	LDA R8
	AND #0E0
	ASL
	ROL
	ROL
	ROL
	ROL ASTERS+3
	ROL
	ROL ASTERS+3
	ROL
	ORA ASTERS+1		;=1SHIELD/1FIRE/SLAM/2L/2R/2T/2S/2F
	STA ASTERS+1		;ASTERS+0=1L/1R/1T/STRT1/STRT2/CR/CC/CL

	LDX #60			;POSITION FOR MESSAGE
	LDA #58
	JSR VGAWT		;POSITION BEAM
	JSR DSPSWN		;DISPLAY SWITCH ID CODE

	LDX SWSQ
	LDA X,SSBIT		;SEE IF ANY OTHER SWITCHES ARE ON
	EOR #-1
	BIT ASTERS
	BNE 100$		;YEP. DON'T DO ANYTHING
	LDA X,SSBIT+1
	EOR #-1
	BIT ASTERS+1
	BNE 100$		;NO GOOD.
	EOR #-1
	BEQ 1$			;BIT NOT IN THIS BYTE
	AND ASTERS+1		;SWITCH ACITVATED?
	BNE 2$			;YEP.

1$:	LDA X,SSBIT
	BIT ASTERS
	BEQ 100$		;SWITCH NOT ON

2$:	INC SWSQ		;UP BY 2
	INC SWSQ

100$:	LDA #1023./8
	TAX
	JSR VGSABS		;POSITION BEAM IN CENTER
	JSR VGHALT		;STUFF IN A HALT AFTER ALL
	STA GOADD		;START VG
	.BR STEST9

	.CSECT D0
A0	=SCORE
A1	=A0+1
A2	=A0+2
A3	=A0+3
A4	=A0+4
A5	=A0+5
A6	=A0+6

DSPSWN:	LDX SWSQ
	LDA X,SSQCH
	STA A4
	LDA X,SSQCH+1
	STA A5
	LDA #0
	JMP MSW			;DISPLAY MESSAGE
	.CSECT GONOGO

STEST9:	LDX LEXPSND
	BNE 1$			;EXPLOSIONS ALREADY GOING ON
	BIT HYPSW		;SHIELDS?
	BPL 2$			;NO. NO EXPLOSION NOW
1$:	DEX			;CONTINUE
2$:	STX LEXPSND
	STX EXPSND		;HDWR REGISTER
	LDA THRUST
	STA SPTEN		;TURN ON/OFF SHIP THRUST

	LDA A3			;SAUCER SEQUENCE?
	BEQ 11$			;NOPE
	LDA A2			;TIMING?
	BNE 8$			;YEP
	BEQ 12$			;(ALWAYS)

11$:	LDX #7
3$:	LDA X,POINT		;BUSY MAKING SOUNDS?
	BNE 4$			;YEP.
	DEX
	BPL 3$

	INC A6			;TIMING?
	BMI 4$			;YEP. EXIT
	DEC A6			;ADJUST TIMER
	LDX A1			;SEQUENCE?
	BNE 5$			;YEP
	BIT DIAGSW		;SHOULD WE?
	BPL 4$			;NOPE

10$:	INC A1			;UP TO NEXT SOUND
	LDX A1

5$:	CPX #MAXSND+1		;AT LIMIT?
	BCC 6$			;NOPE
	BEQ 12$			;DO SAUCER SOUNDS
	LDA #0			;RESET
	STA A1
	STA A2
	STA A3
	BEQ 4$			;(ALWAYS)

12$:	LDA A2			;SAUCER SOUNDS?
	BNE 8$			;STILL TIMING OUT

	LDA #60.		;ABOUT 1 SECOND'S WORTH
	STA A2
	LDY A3			;BIG/LITTLE?
	LDA Y,SSND
	BPL 9$			;YEP
	LDY #SND.BS		;DONE
	JSR SNDOFF		;STOP SOUND
	JMP 10$			;EXIT

9$:	INC A3			;NEXT
	BNE 7$			;(ALWAYS)

8$:	DEC A2			;TIME IT
	BPL 4$			;(ALWAYS)

6$:	INC A1			;UP TO NEXT SOUND
	LDA X,SNUM-1
	STA A6			;SET TIMER
	BMI 4$			;TIMING
7$:	TAY
	JSR SNDON		;TURN ON SOUND

4$:	JMP STEST5

	.GLOBL SNDON,SNDOFF,SND.BS,SND.LS

SSND:	.BYTE SND.LS,SND.BS,-1

SNUM:
	.MACRO SN ARG,TIM
	.GLOBB SND.'ARG
	.BYTE SND.'ARG,-TIM*8.
	.ENDM

	SN T1,1
	SN T2,1
	SN SF,1
	SN PF,1
	SN EL,1
	SN DI,2
	SN BL,1
	SN HT,2
	SN S,2
	SN DS,2
MAXSND	=.-SNUM
	.PAGE
	.SBTTL SWITCH SEQUENCE TABLES
	.CSECT D0
SSQCH:
	.CSECT D1
SSBIT:
	.MACRO SQT BIT,STRING
	.CSECT D1
...1	=1
	.REPT BIT
...1	=...1+...1
	.ENDR
	.WORD ...1
	.CSECT GONOGO
...1	=.
	ASC <STRING>
	.CSECT D0
	.WORD ...1
	.CSECT GONOGO
	.ENDM

	.MACRO ASC MSG
	.IRPC X,<MSG>
	.IF EQ,''X-' 
	.BYTE 0
	.IFF
	.IIF LE,''X-'9,.BYTE X+1*2
	.IIF GE,''X-'A,.BYTE ''X-'A+11.*2
	.ENDC
	.ENDR
	.BYTE -1
	.ENDM

	.RADIX 10
	.NLIST MEB

SQT 14,<1 FIRE  SW3>
SQT 05,<1 THRUST  SW4>
SQT 15,<1 SHIELD  SW5>
SQT 07,<1 ROTATE LEFT  SW9>
SQT 06,<1 ROTATE RIGHT  SW10>
SQT 08,<2 FIRE  SW3>
SQT 10,<2 THRUST  SW4>
SQT 09,<2 SHIELDS  SW5>
SQT 12,<2 ROTATE LEFT  SW9>
SQT 11,<2 ROTATE RIGHT  SW10>
SQT 13,<SLAM  SW8>
SQT 00,<LEFT COIN SWITCH>
SQT 01,<CENTER COIN SWITCH>
SQT 02,<RIGHT COIN SWITCH>
SQT 03,<1 PLAYER START>
SQT 04,<2 PLAYER START>
SQT 16,<SWITCHES OK>
	.RADIX 16
	.PAGE
	.SBTTL	POKEY TEST
PKYTST::LDA FRAME		;GET FRAME #
	AND #3			;ISOLATE LSB'S
	TAX			;INDEX
	LDA POKEY+0A		;GET POKY'S RANDOM #
	STA X,PERR+1		;SAVE IT
	LDY #0			;CLEAR ERROR COUNTER (WILL ALWAYS GET 1 ERROR)
	LDX #4			;SET LOOP COUNTER
2$:	CMP X,PERR		;HOW DOES THIS MATCH WITH THE LAST 3?
	BNE 1$			;DIFFERENT
	INY			;SAME COUNT IT
1$:	DEX
	BNE 2$
	CPY #4			;SET CARRY
	LDY #0A			;MINIMUM VELOCITY NORMAL
	LDX #-0A
	LDA OPTN5		;S/B 0
	ROR
	BEQ 3$
	LDX #-0A/2		;MAKE THE GAME EASY
	LDY #0A/2
3$:	STX RVELM		;+
	STY RVELP		;-
	STA PERR		;ERROR CODE
	RTS

	.MACRO LET .A,.B,.C,.D,.E,.F
	.IRP X,<.A,.B,.C,.D,.E,.F>
	.BYTE ''X-'A+11.*2
	.ENDR
	.ENDM

	.MACRO NUM .A,.B,.C,.D,.E,.F
	.IRP X,<.A,.B,.C,.D,.E,.F>
	.BYTE X+1*2
	.ENDR
	.ENDM

ROMX:	LET R,N,D,E,H,J
ROMY:	NUM 2,2,1,1,1,1

	.PAGE
	.SBTTL INTERRUPT HANDLER

	.GLOBL CSOUND

NMI::	BIT 01FF		;INTERRUPTS ENABLED?
	BMI 10$			;NOPE. EXIT

	PHA
	TYA
	PHA
	TXA
	PHA
	LDA $COINA		;LEFT COIN
	STA CCLFT
	LDA $COINA+1		;MIDDLE
	STA CCMID
	LDA $COINA+2
	STA CCRIT		;RIGHT
	STA POKEY+0B		;GET OPTION SWITCHES
	LDA OPTN5
	EOR #-1			;ADJUST FOR INVERSION
	STA HOLE		;PASS IT TO MAIN LINE
	JSR CSOUND		;DO POKEY AUDIO

	INC $INTCT		;COUNT INTERRUPT
	LDA $INTCT
	AND #00F
	BNE 2$
	JSR EATST		;DO EAROM TEST
2$:	LDA $INTCT
	AND #3			;MODULO 4?
	BNE 1$			;NOT YET
	LDA SYNC
	ORA #1
	STA SYNC
1$:	PLA
	TAX
	PLA
	TAY
	PLA

10$:	RTI
	.PAGE
	.SBTTL EAROM TEST

EAIN	=2C40			;EA READ PORT
EADAL	=3200			;LATCH ADDR/DATA
EACTL	=3A00			;EA CONTROL LATCH
EACK	=1			;CLOCK BIT
EAC1	=4			;C1(INVERTED TO CHIP)
EAC2	=2			;C2
EACE	=8			;CHIP SELECT
				;C1,C2 FUNCTION
				;0 0 READ MODE
				;0 1 UNDEFINED
				;1 0 WRITE MODE
				;1 1 ERASE MODE

; THIS ROUTINE TESTS THE EAROM WITH A SORT OF WALKING 1'S TEST. FIRST
; THE ROM IS ERASED AND WRITTEN WITH ALL ZEROES. THEN A BYTE OF 1'S IS
; WRITTEN IN SUCCESSIVELY HIGHER ADDRESSES WHILE TESTING THAT ALL HIGHER
; ADDRESSES REMAIN 0.
; THE ROUTINE MUST BE CALLED NO MORE FREQUENTLY THAN ONCE EACH 64 MS.

LIMIT	=21.		;NUMBER OF CELLS TO TEST.

; IN ORDER FOR THE TEST TO FUNCTION PROPERLY, THE PAGE 0 CELL 'EAX' MUST BE
; INITIALISED TO 0. SETTING THE PAGE 0 CELL 'EAFLG' = 1 WILL START THE TEST

EATST:	LDA EAFLG		;GET PROCESS CONTROL BYTE
	ASL			;MAKE IT AN ADDRESS INDEX
	TAX
	LDA X,DPT+1		;DISPATCH IT
	PHA
	LDA X,DPT
	PHA
	RTS			;DO PROCESS

	.MACRO DPTB ARG
	.IRP X,<ARG>
	.WORD X-1
	.ENDR
	.ENDR

DPT:	DPTB <EANULL,EAALL,WAW0>
EAS0	=.-DPT/2
	DPTB <EASTP0,EASTP1,EASTP2,EASTP3,EASTP4,EASTP5>

	.WORD 0,0,0,0		;SPARES
EANULL:	LDA #0			;DO NOTHING
	STA EACTL		;BUT DE-SELECT
	RTS

EAALL:	JSR EAERSE		;ERASE IT
	BNE EACOMN

WAW0:	LDA #0
	JSR EAWRT		;WRITE A ZERO

EACOMN:	INC EAX
	LDA EAX
	CMP #LIMIT		;DONE?
	BCC 1$			;NOPE
	LDA #0
	STA EAX			;START OVER
	INC EAFLG		;WITH NEXT PROCESS
1$:	RTS

EAERSE:	LDX EAX			;GET ADDRESS
	LDA #EAC1+EAC2		;SELECT ERASE MODE
	STA EACTL
	STA X,EADAL		;LATCH ADDRESS
	ORA #EACE		;CHIP ENABLE
	STA EACTL		;SELECT CHIP
	RTS			;FINI

EAWRT:	LDX EAX			;GET ADDRESS
	STA X,EADAL		;LATCH DATA/ADDRESS
	LDA #EAC1		;SELECT WRITE MODE
	STA EACTL		;START
	ORA #EACE		;CHIP ENABLE
	STA EACTL		;WRITE
	RTS			;FINI

EASTP3:				;STEP 3 IS THE SAME AS STEP 0
EASTP0:	JSR EAERSE		;ERASE CELL AT (EAX)
	INC EAFLG		;NEXT STEP
	RTS

EASTP1:	LDA #-1			;WRITE 1'S IN ALL BITS IN CELL
EAS14:	JSR EAWRT
	LDX #LIMIT-1
	STX EABC		;START READING AT THE END
	INC EAFLG		;NEXT TIME
	RTS

	.ENABL LSB
EASTP2:	LDA #0			;READ MODE
	STA EACTL		;DROP ANY SELECT LINES
	LDX EABC		;GET ADDRESS
	LDA #EACE		;CHIP ENABLE
	STA X,EADAL		;LATCH ADDRESS
	STA EACTL		;ENABLE CHIP
	ORA #EACK
	STA EACTL
	LDA #EACE
	STA EACTL		;WIGGLE CLOCK LINE
	DEC EABC		;WAIT WHILE UPDATING ADDRESS
	LDA EAIN		;GET DATA
	BEQ 1$			;ITS PROBABLY GOOD IF 0
	EOR #-1			;ARE THEY ALL 1'S
	BNE 2$			;NOPE. DEFINATELY NO GOOD
	CPX EAX			;ARE THEY SUPPOSED TO BE 1'S?
	BEQ 3$			;YEP. WE'RE DONE THEN

2$:	LDA #-1			;NOPE. SAY WE'VE GOT AN ERROR
	STA PROT
EAEND:	LDA #0
	STA EAFLG		;TERMINATE TEST
	RTS

1$:	CPX EAX			;AT END?
	BEQ 2$			;ERROR
	BCC 2$			;ERROR
	RTS			;OK. CONTINUE

3$:	INC EAFLG		;NEXT PROCESS
	RTS
	.DSABL LSB

EASTP4:	LDA #0
	BEQ EAS14		;(ALWAYS)

EASTP5:	INC EAX			;NEXT ADDRESS UNDER TEST
	LDX #EAS0		;LOOP BACK TO STEP 0
	STX EAFLG
	LDA EAX
	CMP #LIMIT		;AT END?
	BCS EAEND		;YEP
	BCC EASTP0		;DO STEP 0
	.PAGE
	.SBTTL MESSAGE HANDLER

; AT ENTRY:
; X=MESSAGE NUMBER (MUST BE EVEN)

; AT EXIT:
; VGLIST UPDATED, A,X,Y,A0,A4,A5 USED

A4	=A0+4
A5	=A0+5

MESSGE:	LDA X,MOFFS		;GET ADDRESS OF MESSAGE STUFF
	STA A4
	LDA X,MOFFS+1
	STA A5
	LDY #0
	LDA NY,A4		;GET Y POSITION
	TAX
	INY
	LDA NY,A4
	JSR VGAWT		;POSITION BEAM
	LDA #2
MSW:	STA A0

2$:	LDY A0
	LDA NY,A4
	BMI 1$			;END
	TAY
	INC A0
	JSR VGCHAR
	JMP 2$

1$:	RTS			;FINI
	.PAGE
	.SBTTL MESSAGES

	.MACRO MSG LABL,XP,YP,MESG
	.CSECT D0
...1	=.
	.BYTE XP,YP
	ASC <MESG>
	.CSECT D1
LABL	=.-MOFFS
	.WORD ...1
	.ENDM


	.CSECT D1
MOFFS:
	MSG EATMSG,70,48,<EAROM TEST IN PROGRESS>
	MSG EAGOOD,70,6C,<EAROM OK>
	MSG EABADM,70,6C,<EAROM BAD>
	.CSECT GONOGO
	.END PWRON
                                                                                                                                                                                                                                                                                                                                                                                                                          