	.TITLE DSTTST- DELUXE COCKTAIL ASTEROID SELF TEST
	.CSECT CASTST
	.RADIX 16
	.ENABL AMA
	.LIST MEB
	.NLIST BYT,CND
;*******************************
;*
;* THIS PROGRAM RESIDES IN THE UPPER 2K OF PROGRAM SPACE
;* IT PERFORMS POWER ON RESET PROCESSING
;* AS WELL AS SELF-TEST. SEE DSTRD0.MAC FOR HARDWARE
;* CONFIGURATION
;*
;*******************************
	.SBTTL ****************************
	.SBTTL *
	.SBTTL *PROGRAMMER: DAVE SHEPPERD
	.SBTTL *
	.SBTTL ****************************
;
;ENTRY POINTS
;
	.GLOBL PWRON,VGADD2,VGAWT
	
;
;EXTERNAL ENTRY POINTS
;
	.GLOBL TEST1,BNKERR,ERASE		;SELF TEST X-Y PATTERN
	.GLOBL START,NMI,EAUPD
	.GLOBL VGHALT,VGVCTR,VGRTSL,VGMSGA	;UTILITY X-Y ROUTINES
	.GLOBL VGJMPL,VGJSRL,VGLABS,VGADD
	.GLOBL VGWAIT,VGSABS,VGHEX,VGHEXZ,VGCHAR
$DAST=1
$DTHST=0
	
	
	.INCLUDE DSTDEC		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.ASECT
	.INCLUDE PG0123		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.CSECT DSTTST
	
	
	.SBTTL VGBLNK (DISPLAY BALNK)
	.GLOBL SINIT,LIVESS,DIGITS,VGSPAC,PKYERR,BONDSP
VGBLNK:	JSR VGHEX		;DISPLAY DIGIT
	LAL VGSPAC		;FOLLOW WITH A SPACE
	LXH VGSPAC
;	JMP VGADD2
;
	.SBTTL	VGADD2 (ADD 2 BYTES TO LIST, UPDATE VGLIST)
;VGADD2-ADD 2 WORDS TO VECTOR LIST
;
;ENTRY	(A)=FIRST BYTE
;	(X)=SECOND BYTE
;EXIT	(VGLIST,VGLIST+1)=NEW VECTOR LIST POINTER
;USES	A,Y

VGADD2:	LDY I,0
	STA NY,VGLIST
	INY
	TXA
	STA NY,VGLIST
	JMP VGADD		;UPDATE VECTOR POINTER

	.SBTTL PWRON RESET ENTRY
PWRON:	LDX #-2
	TXS			;SET STACK
	CLD			;IN BINARY MODE
	LDX #0			;WE HAVE 5.33MS TO CHECK PAGE 1
	STX POKEY+0F

	.SBTTL RAM TEST

11$:	LDA #11			;2 2114'S
10$:	STA X,100
	TAY			;SAVE CODE
	EOR X,100		;WORK?
	BNE 70$			;NO
	TYA
	ASL			;SHIFT PATTERN
	BCC 10$
	TXA
	STA X,0
	STA X,100
	STA X,200
	STA X,300
	STA X,4000
	STA X,4100
	STA X,4200
	STA X,4300
	STA X,4400
	STA X,4500
	STA X,4600
	STA X,4700
	DEX
	BNE 11$			;256 BYTES (TAKES 25.3MS)
	STA WTDOG		;DON'T LET WATCHDOG TIME OUT
12$:	TXA
16$:	EOR X,100		;ADDR MATCH?
	BNE 70$			;NO
	STA X,100		;COVER OUR TRACKS
	INX
	BIT STSTSW		;IN SELF-TEST?
	BPL 13$			;NO
	TXA			;YES. CHECK IT ALL
	BNE 16$
	BEQ 14$
13$:	CPX #0FB		;NMI'S ARE RUNNING. DON'T CKECK IT ALL
	BCC 12$
	LDX #0			;NOW CHECK PAGE 0
14$:	TXA
	EOR X,0			;ADDR MATCH?
	BNE 70$			;NO
	LDA #11			;TRY INDIVIDUAL BITS
15$:	STA X,0
	TAY			;SAVE BIT PATTERN
	EOR X,0			;WORK?
70$:	BNE P0123E		;BAD
	TYA
	ASL			;NEXT BIT
	BCC 15$
	LDY #0			;COVER OUR TRACKS
	STY X,0
	DEX
	BNE 14$

PG010K:	STA WTDOG		;PAGES 0 & 1 ARE GOOD
	LDA #2			;CHECK PGS 2,3
35$:	STA 1
40$:	TYA
	EOR NY,0		;ADDRESS MATCH?
	BNE P4000E		;NO
	LDA #11			;TEST EACH BIT INDIVIDUALY
10$:	STA NY,0
	TAX			;SAVE PATTERN
	EOR NY,0		;MATCH?
	BNE P4000E		;NO
	STA NY,0		;COVER OUR TRACKS
	TXA
	ASL
	BCC 10$
	INY
	BNE 40$			;NEXT LOCATION TO TEST
	STA A,WTDOG		;NO BARKING NOW
	INC 1
	LDX 1
	CPX I,04
	BCC 40$			;NEXT PAGE TO TEST
	LDA I,40
	CPX I,40
	BCC 35$			;TEST 2K OF RAM AT 4000
	CPX I,48
	BCC 40$			;MORE OF 2K BLOCK LEFT
	BCS STEST3		;RAM IS GOOD
	.PAGE
	.SBTTL RAM ERROR HANDLER
CKSUM5::.BYTE 0
P0123E:	LDY I,0			;ERROR IN FIRST 1K
	BEQ STEST1

P4000E:	LDY I,0
	LDX 1
	CPX I,04
	BCC STEST1		;IF ERROR IN FIRST 1K OF RAM
	INY
	CPX I,44
	BCC STEST1		;ERROR IN SECOND 1K RAM
	INY			;ERROR MUST BE IN THIRD 1K RAM
STEST1:	CMP I,10		;SET TO 1,2 OR 3
	ROL
	AND I,1F
	CMP I,02
	ROL			;EACH 1 REPRESENTS A BAD 2114
	AND I,03
15$:	DEY
	BMI 20$			;IF THIS 1K BLOCK WAS BAD
	ASL			;FLAG 2 RAM IC'S AS GOOD
	ASL
	BCC 15$			;ALWAYS

20$:	LSR
	LDY #7
	STY POKEY+0F
	LDX #20			;HIGH FREQ (IF CHIP GOOD)
	BCC 25$			;IF RAM IC IS GOOD
	LDX #80			;LOW FREQ
25$:	STX POKEY
	LDX #0A8
	STX POKEY+1
	LDX I,0
31$:	BIT A,THRKHZ		;COUNT 1 3KHZ SIGNAL
	BPL 31$
32$:	BIT A,THRKHZ
	BMI 32$
	DEX
	STA A,WTDOG		;NOW NOT
	BNE 31$			;COUNT FOR 256/3000 OF A SECOND
	DEY
	BPL 31$			;8*256/3000 OF A SECOND
	STX POKEY+1		;TURN OFF SOUND
	LDY I,08
35$:	BIT A,THRKHZ		;COUNT 3KHZ SIGNALS
	BPL 35$
36$:	BIT A,THRKHZ
	BMI 36$
	DEX
	STA A,WTDOG		;NOT NOW
	BNE 35$			;COUNT TIL 256/3000 OF A SECOND
	DEY
	BNE 35$			;COUNT TIL 8*256/3000 SECONDS
	TAX			;SET FLAGS
	BNE 20$			;MORE TO COME
STOP:	STA A,WTDOG		;NO BITING NOW
	LDA A,STSTSW
	BMI STOP		;WAIT UNTIL STEST SWITCH IS PUSHED
10$:	BPL 10$			;START ALL OVER - WITH WATCHDOG

	.SBTTL ROM CHECKSUM

STEST3:	LDA I,0			;CKSUM ALL ROMS
	TAY
	TAX
	LDA I,48
5$:	STA Z,TEMP1+1
	LDA I,7			;8 PAGES TO TEST
	STA Z,TEMP2
	LDA I,55		;STARTING PATTERN
	CLC
10$:	ADC NY,TEMP1
	INY
	BNE 10$			;DO ONE PAGE
	INC Z,TEMP1+1
	DEC Z,TEMP2
	BPL 10$			;DO 8 PAGES
	STA ZX,R0		;STORE 6 CKSUMS STARTING AT R0
	ORA CKERR		;KEEP ERROR FLAGS
	STA CKERR
	INX
	STA A,WTDOG		;WHAT HAVE YOU BEEN TYPING ON THESE, LINDA?
	LDA Z,TEMP1+1
	CMP I,58
	BCC 5$			;CKSUM 4800 TO 5800
	BNE 20$			;THEN SKIP TO 6000
	LDA I,60
20$:	CMP I,80
	BCC 5$			;CKSUM 6000 TO 8000
	STA A,300		;200=0 AND 300=80
	STA BNKSEL		;SWITCH TO PLAYER 2
	CMP A,200
	BEQ 25$			;BANK SELECT APPEARS OK
	INC XT			;ERROR
25$:	LDA A,300
	BEQ STEST5
	INC XT			;ERROR
	.PAGE
	.SBTTL DISPLAY HANDLER
STEST5:	LDA I,10
	STA Z,VGSIZE		;SET CHARACTER SIZE
	STA BNKSEL		;SWITCH TO PLAYER 1 CONTROLS
;
;(TEMP1,TEMP1+2)=USED FOR DETECTING SWITCH CLOSURES
;(TEMP2,TEMP2+1)=USED FOR SCRATCH
;(R0-R5)=6 CHECKSUMS FOR THE ROMS
;(CKERR)=COMPOSITE ERROR
;(TEMP4+1)=ZERO IF NO BANK SELECT ERROR
;
	LDX I,24		;THIS IS SET FOR 16MS BEST CASE
5$:	LDA A,THRKHZ		;WAIT THRU ONE 3KHZ CYCLE
	BPL 5$
7$:	LDA A,THRKHZ
	BMI 7$
	DEX			;COUNTDOWN TO VECTORS REPEAT EVERY 16MS
	BPL 5$
8$:	BIT A,HALT		;WAIT FOR HALT
	BMI 8$			;WATCHDOG WILL RESET IF VECTOR GENERATOR IS LOST
	STA A,WTDOG
	LDA I,VECRAM&0FF
	STA Z,VGLIST
	LDA I,VECRAM/100
	STA Z,VGLIST+1
	
	
STEST6:	LDA STSTSW
	AND #80			;S.T. SWITCH
	BNE 90$			;STAY IN SELF-TEST
	STA 1FF			;ENABLE NMI'S
	JMP START		;BEGIN GAME
	
90$:	LDA Z,XT
	BEQ 30$
	LXL BNKERR
	LAH BNKERR
	JSR VGJSRL		;JSRL BNKERR FOR BANK SELECT ERROR 
30$:	LDX I,600./4
	STX TEMP2+1		;STARTING Y VALUE FOR CHECKSUMS
	LDX I,5
32$:	LDA ZX,R0
	BEQ 35$
	STX TEMP2		;SAVE X
	LDX TEMP2+1
	TXA
	SEC
	SBC I,08		;32 BELOW CURRENT LINE
	STA TEMP2+1		;SAVE POSITION FOR NEXT LINE
	LDA I,128./4
	JSR VGAWT
	LDX TEMP2
	LDY X,ROMX		;GET X ADDRESS OF ROM
	JSR VGCHAR		;DISPLAY
	LDX TEMP2
	LDY X,ROMY		;GET Y ADDRESS OF ROM
	JSR VGCHAR		;DISPLAY
	LDX TEMP2
35$:	DEX
	BPL 32$			;LOOP THRU ALL CHECKSUMS
	LAH TEST1
	LXL TEST1
	JSR VGJSRL		;JSRL TO TEST PATTERN
	LDA I,93
	LDX I,0A0
	JSR VGAWT		;POSITION BEAM
	LDX I,03		;NO NEED TO WAIT
28$:	LDA AX,OPTN1		;GO FROM SW1 TO SW8
	AND I,3
	STX Z,TEMP2
	JSR VGBLNK
	LDX Z,TEMP2
	DEX
	BPL 28$			;LOOP THRU 8 SWITCHES
	LDA #93			;X POSITION
	LDX #0B0			;Y POSITION
	JSR VGAWT		;POSITION
	LDA #7			;RELEASE POKEY
	STA POKEY+0F
	STA POKEY+0B
	LDA OPTN5		;GET COIN OPTIONS
	EOR #-1
	STA TEMP2
	STA $CMODE
	ASL
	ROL
	ROL
	ROL
	ROL TEMP2+1
	AND #7			;ISOLATE BONUS OPTIONS
	JSR VGBLNK		;DISPLAY DIGIT FOLLOWED BY BLANK
	LDA TEMP2+1
	AND #1			;ISOLATE MIDDLE MECH MULTIPLIER
	JSR VGBLNK		;DISPLAY DIGIT FOLLOWED BY BLANK
	LDA TEMP2
	LSR
	LSR
	AND #3			;ISOLATE RIGHT MECH MULTIPLIER
	JSR VGBLNK		;DISPLAY DIGIT FOLLOWED BY BLANK
	LDA TEMP2
	AND #3			;ISOLATE COIN MODE
	JSR VGBLNK		;DISPLAY DIGIT FOLLOWED BY BLANK
	JSR SINIT
	LDY NHITS
	LDA #96
	LDX #94
	INY
	JSR LIVESS		;DISPLAY THEM
	LDA #10
	STA VGSIZE
	LDA BONSCR+2		;BONUS?
	BMI 27$			;NO BONUS
	LDA #8E
	LDX #83
	JSR VGAWT
	JSR BONDSP		;DISPLAY BONUS SCORE
27$:	LDA PERR		;ANY POKEY ERRORS?
	BEQ 25$			;NO
	LXH PKYERR
	LAL PKYERR
	JSR VGADD2
25$:	INC FRAME
	LDA FIRESW		;IF ALL 4 BUTTONS ARE ON
	AND THRUST
	AND ROTL
	AND ROTR
	BPL 11$			;THEY'RE NOT
	BIT LPLAYR
	BMI 11$			;ALREADY ERASED
	STA EAFLG		;SIGNAL TO ERASE
	STA LPLAYR		;ONLY DO THIS ONCE
	LDX #21.
	STX EABC		;21 BYTES
	DEX
	STX EAX			;START @ 20
11$:	LDA LPLAYR		;ANY EA STUFF?
	BEQ 29$			;NO. NO MESSAGES EITHER
	LDA EAFLG		;ERASING OR WRITING?
	BEQ 29$			;NO
	LDA #94
	LDX #72
	JSR VGAWT
	LXL ERASE		;SAY WE'RE ERASING
	LAH ERASE
	JSR VGJSRL
	JSR EAUPD		;DO EA STUFF
	LDA $INTCT		;NMI'S DON'T WORK IN SELF TEST
	CLC
	ADC #4			;SO FOOL EAUPD ROUTINE
	STA $INTCT		;BY SAYING 4 INTERRUPS HAPPENED
29$:	LDA I,1023./8
	TAX
	JSR VGSABS		;CENTER BEAM
	JSR VGHALT		;STOP BEAM
	.PAGE
	.SBTTL SWITCH TEST

STEST7:	LDY #8
	LDA #0
1$:	STA Y,POKEY-1		;CLEAR POKEY REGISTERS
	DEY
	BNE 1$			;LEAVE Y=0 WHEN DONE

	JSR SWCH		;GET PLAYER SWITCHES
;	LDA ASTERS+3		;GET DIFFERENCE BITS
	ORA ASTERS+2
	ORA ASTERS+1
	ORA ASTERS+0
	BEQ 25$			;NO DIFFERENCES

	LDA I,0A4		;TURN ON SOUND
25$:	STA POKEY+1		;VOLUME SELECT
	LSR			;CLEAR BIT 7
	STA POKEY		;FREQUENCY SELECT
	STA A,GOADD		;START DRAWING NOW
	JMP STEST5


SWCH:	JSR 1$			;DO THE FOLLOWING TWICE

1$:	LDX #7			;PUT 8 SWITCHES INTO ACC
2$:	ROL X,$COINA		;RL/RR/TH/S1/S2/CR/CC/CL
	ROR
	DEX
	BPL 2$
	JSR 4$			;COMPUTE DIFFERENCES

	LDX #4			;PUT 5 SWITCHES INTO ACC
3$:	ROL X,HYPSW		;SHLD/FIRE/DIA.STP./SLAM/SELFT
	ROR
	DEX
	BPL 3$
	STX BNKSEL		;SWITCH TO PLAYER 2 FOR NEXT TIME

	LDX #40.
5$:	DEX
	BPL 5$
4$:	TAX			;SAVE SWITCHES FOR A SEC.
	EOR Y,R6		;COMPUTE DIFFERENCES
	STA Y,ASTERS		;SAVE DIFFERENCES
	STX Y,R6		;SAVE NEW READINGS
	INY			;UP TO NEXT VARIABLES FOR NEXT TIME
	RTS			;RECURSE/EXIT AS RQD.

	.REPT STEST7+81.-.	;FILLER SO ADDRESS DON'T CHANGE
	.BYTE -1
	.ENDR
	.PAGE
	.SBTTL	POKEY TEST
PKYTST::LDA FRAME		;GET FRAME #
	AND #3			;ISOLATE LSB'S
	TAX			;INDEX
	LDA POKEY+0A		;GET POKY'S RANDOM #
	STA X,PERR+1		;SAVE IT
	LDY #0			;CLEAR ERROR COUNTER (WILL ALWAYS GET 1 ERROR)
	LDX #4			;SET LOOP COUNTER
2$:	CMP X,PERR		;HOW DOES THIS MATCH WITH THE LAST 3?
	BNE 1$			;DIFFERENT
	INY			;SAME COUNT IT
1$:	DEX
	BNE 2$
	CPY #4			;SET CARRY
	LDY #0A			;MINIMUM VELOCITY NORMAL
	LDX #-0A
	LDA OPTN5		;S/B 0
	ROR
	BEQ 3$
	LDX #-0A/2		;MAKE THE GAME EASY
	LDY #0A/2
3$:	STX RVELM		;+
	STY RVELP		;-
	STA PERR		;ERROR CODE
	RTS

	.MACRO LET .A,.B,.C,.D,.E,.F
	.IRP X,<.A,.B,.C,.D,.E,.F>
	.BYTE ''X-'A+11.*2
	.ENDR
	.ENDM

	.MACRO NUM .A,.B,.C,.D,.E,.F
	.IRP X,<.A,.B,.C,.D,.E,.F>
	.BYTE X+1*2
	.ENDR
	.ENDM

ROMX:	LET R,N,D,E,H,J
ROMY:	NUM 2,2,1,1,1,1

	.END
                                                                                                                                                                                                                                                                                                                                                                                  