	.NLIST CND
$DAST=1		;SET NOT ZERO FOR DELUXE ASTEROIDS
;$DTHST			;SET NOT ZERO FOR DEATH STAR
	.IIF NDF,$DAST,$DAST=0
	.IIF NDF,$DTHST,$DTHST=0
	.IF NE,$DAST
	.TITLE TRIROT SPECIAL ENEMY ROCK CONTROL
	.IFF
	.TITLE TRIROT SNOWFLAKE/ENEMY CONTROLS
	.ENDC
	.RADIX 16
	.ENABL AMA,USD
	.ASECT
	.INCLUDE DSTDEC		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.INCLUDE PG0123		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	.ASECT
	.=4800
	.GLOBL VGLABS,VGWAIT,VGADD,CPYVEC
	.GLOBL VGADD2,VGJSRL
	.IF NE,$DTHST
	.PAGE
	.SBTTL SNOW FLAKE
	.GLOBL SNOWV

SNOWF::	LDA #80			;COMPUTE SNOWFLAKE BRIGHTNESS
	SBC SAUPIX
	LSR
	LSR
	LSR
	LSR
	CMP #4			;LIMIT IT
	BCC 1$
	LDA #4
1$:	ORA SFBRIT		;MERGE IN TEMPORARY BRIGHTNESS
	AND #7			; (IN CASE OF ERROR)
	STA R0			;SAVE COUNT
2$:	LAH SNOWV
	LXL SNOWV		;SNOWFLAKE BRIGHTNESS MODULATED BY
	JSR VGJSRL		;  DRAWING THE PICTURE 'N' TIMES
	DEC R0
	BPL 2$
	DEC SFBRIT
	BPL 3$
	INC SFBRIT
3$:	RTS

	.SBTTL RELEASE TIP
RELTIP::LDX #5		;6 ITEMS TO SEARCH
	LDY NROCKS		;GET TOTAL ITEM COUNT
2$:	LDA X,OBJ		;GET PIX CODE
	ASL
	BCS 3$			;EXPLODING. DON'T COUNT IT
	BPL 1$			;NOT WAITING
	DEY			;WAITING. TAKE 1 FROM TOTAL
	BPL 3$			; (ALWAYS)

1$:	AND #8			;BIG ONE?
	BEQ 3$			;NOPE
	INY			;YES. COUNT IT AS 2
3$:	DEX
	BPL 2$
	STY R8			;SAVE COUNT
	LDA SFDIS		;OK TO RELEASE ?
	BNE 5$			;NOPE
	LDA SFWAVE		;GET CURRENT WAVE COUNT
	LSR			;/2
	CMP #4			;LIMIT IT TO 4
	BCC 10$
	LDA #4
10$:	CMP R8			;ROOM FOR ANOTHER OBJECT?
	BCC 5$			;NOPE
	LDA RANDOM
	AND #7			;BETWEEN 0-7
	TAX			;SAVE IT
6$:	LDA X,OBJ		;GET TIP
	ASL
	BCS 4$			;NOT AVAILABLE
	BMI 7$			;FOUND ONE
4$:	INX			;LOOK FORWARD
	CPX #6
	BCC 6$
	DEX
9$:	LDA X,OBJ		;LOOK BACK
	ASL
	BCS 8$
	BMI 7$			;FOUND ONE
8$:	DEX
	BPL 9$
5$:	LDA RTIMER		;CONTINUE TO TIME OUT
	BEQ 11$
	DEC RTIMER
11$:	RTS			;NO TIPS LEFT

7$:	LDA #3E			;SET TRACKING TIME,
	STA X,OBJ		;READY IT FOR FLIGHT
	RTS
	.PAGE
	.SBTTL ZAP SNOWFLAKE

CLRSF::	STX R0		;SAVE X
	LDX #5
2$:	LDA X,OBJ	;GET PICTURE CODE
	ASL
	BCS 1$		;EXPLODING
	BPL 1$		;NOT PART OF SNOWFLAKE
	LDA #0
	STA X,OBJ	;TURN OFF PICTURE
	DEC NROCKS	;TAKE 1 FROM TOTAL
1$:	DEX
	BPL 2$
	LDX R0		;RESTORE R0
CLRSFP::LDA #0
	STA SAUXH	;MAKE SURE SAUCER IS OFF SCREEN
	STA SAUXL
	STA SAUPIX
	RTS
	.ENDC
	.PAGE
	.SBTTL SPLIT TIPS ON COLLISION
	.GLOBL CPYPOS,POINTS,BLOUP,SPLTTP,SEARCH,SEARC1

SPLTTP::
	.IF NE,$DAST
	LDA Y,OBJ	;GET PIX CODE
	AND #3C		;ISOLATE LINK FIELD
	LSR		;MAKE IT RELATIVE TO 0
	LSR
	TAX		;POINT TO OBJECT PARAMS
	LDA X,SRTIME	;GET CONTROL BYTE
	BPL 1$		;NOT WAITING
	STX XT		;SAVE INDEX
	LDA #5		;POINTS
	JSR GPTS	;GIVE POINTS
	JSR SEARCH	;LOOK FOR FREE ENTRY
	INC NROCKS	;ADD ANOTHER TO TOTAL
	LDA Y,OBJ	;GET PIX CODE AGAIN
	PHA		;SAVE IT
	JSR CPYPOS	;COPY ALL PARAMATERS
	PLA		; (CPYPOS BLITZES 'OBJ')
	STA X,OBJ	; (SO PASS THE OLD PIX CODE
	LDA #0
	STA Y,OBJ	;CAUSE A BIG EXPLOSION
	LDX XT		;RESTORE X

3$:	LDA X,SRTIME	;FREE ALL THE OBJECTS IN THE CLUSTER
	BPL 2$		;DONE
	PHA		;SAVE INDEX
	LDA #7F
	STA X,SRTIME	;RELEASE AS BIG OBJECT WITH MAX TIME
	PLA		;RETRIEVE INDEX
	LSR		;COMPUTE THE LINK VALUE
	AND #0F		;MASK
	TAX		;X NOW HAS LINK TO NEXT OBJECT
	BPL 3$		; (ALWAYS)

1$:	LSR		;PUT SIZE BIT INTO CARRY
	BCS 4$		;ITS A BIG ONE
	LDA #0
	STA X,SRTIME	;DE-ACTIVATE CONTROL BYTE
	LDA #20
	JSR GPTS	;GIVE 'EM 200 POINTS
	JSR DIASND		;GIVE SOUND FOR DIAMOND
2$:	LDX TEMP3	;RESTORE X
	RTS		;EXIT

4$:	LDA #10		;GIVE 'EM 200
	STX XT		;SAVE X
	JSR GPTS	;
	JSR SEARCH	;FIND A FREE ENTRY
	JSR CPYPOS	;COPY POSITION PARAMETERS
	INC NROCKS	;ADD 1 TO TOTAL OBJECTS
	INC SPROCK	;ADD 1 TO SPECIAL COUNT
	LDA XT		;GET CONTROL BYTE INDEX
	ASL
	ASL
	ORA #42		;SAY ITS A SPECIAL ROCK BUT A SMALL ONE
	STA X,OBJ
	STX R0		;SAVE X
	LDX XT		;POINT TO CONTROL BYTE
	LDA #7E
	STA X,SRTIME
	LDA ANGLE
	ADC #20		;POINT IT AWAY APPROX 45 DEGREES
	STA X,SRANG
	JSR FREESR	;FIND A FREE SPECIAL ROCK ENTRY
	STX XT		;SAVE ENTRY POINTER
	LDX R0		;POINT TO OBJ
	JSR SEARC1	;LOOK FOR NEXT FREE OBJ
	JSR CPYPOS	;MOVE POSITION PARAMETERS
	INC NROCKS	;ADD 1 TO TOTAL OBJECT COUNT
	LDA XT		;GET LINK TO SPECIAL
	ASL
	ASL
	ORA #42
	STA X,OBJ	;SELECT SPECIAL ROCK
	LDX XT		;POINT TO SPECIAL CONTROLS
	LDA #7E		;ACTIVATE OBJECT
	STA X,SRTIME
	LDA ANGLE
	SBC #20		;POINT AWAY APPROX 45 DEGREES
	STA X,SRANG
	LDX TEMP3	;RESTORE X
	RTS		;EXIT
	.IFF
	RTS
	.IFT

FREESR:	LDX #NSPCLS-1	;MAXIMUM # OF SPECIAL ROCKS ALLOWED
2$:	LDA X,SRTIME	;FIND AN EMPTY SLOT
	BEQ RTS.0	;GOT ONE
	DEX
	BPL 2$		;KEEP LOOKING
RTS.0:	RTS
	
GPTS:	LDX TEMP3
	BEQ 1$		;SHIP. GIVE POINTS
	CPX #4		;SHIP'S TORPEDOES?
	BCC RTS.0	;NO. NO POINTS
1$:	CLC
	JMP POINTS	;GIVE POINTS
	.ENDC
	.PAGE
	.SBTTL ATTACK SHIP

	.GLOBL ATAN,SIN,COS,CPUTD

ATTACK::STX R0		;SAVE X
	LDY #NOBJ	;ASSUME WE WILL TRACK SHIP
	STY R1		;INIT R1 FOR LATER
	INC R9		;COUNT ATTACKING ENEMY
	LDA X,OBJ	;GET PIX CODE
	LSR
	LSR
	AND #0F
	TAX		;POINT TO CONTROL BYTE
	LDY X,SRTIME	;GET CONTROL
	CPY #4		;TIMED OUT?
	BCC 2$		;YEP. TRACK TO EDGE
	LDA FRAME
	AND #0F		;TIME OUT ?
	BNE 3$		;NOT HERE
	TYA		;GET TIME
	SEC
	SBC #2		;TIME DOWN
	STA X,SRTIME
3$:	LDA SHPPIX	;SHIP VISIBLE?
	BEQ 7$		;NOPE. FORCE A TIME OUT
	BPL 4$		;VISIBLE BUT BLOWING UP
7$:	TYA		;GET CONTROL
	AND #1		;KEEP SIZE
	ORA #2		;AND A MINIMUM TIME (KEEPS IT .NE.)
	STA X,SRTIME
	
2$:	INC R1		;TRACK ON SNOW FLAKE
	
4$:	LDY R1
	STX XT		;SAVE X
	LDX R0		;POINT TO POSITION PARAMETERS
	JSR CPUTD
	JSR RTST	;DO RANGE
	STA R3		;SAVE X DIFFERENCE
	LDA TEMP2
	STA R2
	LDA R1
	CLC
	ADC #NOBJ+8	;SKIP TO Y PARAMETERS
	TAY
	TXA
	ADC #NOBJ+8
	TAX
	JSR CPUTD	;COMPUTE Y DISTANCE
	JSR RTST	;RANGE IT
	JSR SCALER	;SCALE IT, GET ARCTAN
	LDX XT		;RESTORE X
	STA R2		;SAVE ANGLE
	LDY #NOBJ
	CPY R1		;TRACKING ON SHIP?
	BNE 21$		;NO. ALWAYS TURN
	EOR #80		;FLIP IT 180
	SBC ANGLE	;SEE HOW IT COMPARES WITH SHIP'S ANGLE
	BPL 20$
	EOR #-1
20$:	CMP #10		;DON'T TURN IF SHIP IS POINTING AT ENEMY
	BCS 21$		;GO AHEAD AND TURN
	LDA R2		;GET ANGLE
	SBC X,SRANG
	BPL 22$
	EOR #-1
22$:	CMP #40		;IS OBJECT POINTING AT SHIP
	BCC 18$		;YES. DON'T TURN
21$:	LDA R2		;RETRIEVE ANGLE
	SEC
	SBC X,SRANG	;GET ABS(TARGET-CURRENT)
	STA R2		;SAVE SIGN
	BPL 11$		;OK
	EOR #-1		;NEGATE IT
11$:	CMP #8			;DIFFERENCE > 8?
	BCC 18$			;NOPE. DON'T TURN
	LDA #1			;PREPARE FOR SLOW TURN
	LDY #NOBJ
	CPY R1			;TRACKING ON SHIP?
	BNE 12$			;NO. SLOW TURNS

	LDX R9			;GET OBJ #
	CPX #7			;LIMIT IT
	BCC 17$
	LDX #0
17$:	LDA X,AVEL		;GET ANGULAR VELOCITY
	LDX XT			;RESTORE X
12$:	ASL R2		;GET SIGN
	BCC 16$		;+
	EOR #-1		;NEGATE IT (CARRY SET FROM ABOVE)
16$:	ADC X,SRANG
	STA X,SRANG
18$:	LDA BINSCR
	ASL
	CMP #10			;MAX IT OUT
	BCC 19$
	LDA #0F
19$:	ADC #1C			;MINIMUM VELOCITY
	STA R1
	PHA
	LDA X,SRANG
	JSR COS		;GET COS(ANGLE)
	JSR MULT
	LDX R0		;RESTORE X
	STA X,XINC	;SUPPLY NEW X INCREMENT
	PLA
	STA R1
	LDX XT
	LDA X,SRANG
	JSR SIN
	JSR MULT
	LDX R0
	STA X,YINC
	RTS

AVEL:	.BYTE 1,2,3,3,3,4,4
CKSUM0::	.BYTE 0		;CHECKSUM 4800-4FFF

	.GLOBL DIASND,SND.DI,SNDON

;DIAMOND OBLITERATION SOUND GENERATOR
;
;AT ENTRY:
;(CC) - .EQ. IF LAST DIAMOND BLOWN AWAY

;AT EXIT:
;(A) = UNDEFINED

DIASND:	DEC SPROCK
	BNE 1$			;NOT LAST ONE
	TYA			;SAVE Y
	PHA
	LDY #SND.DI		;DIAMOND NOISE
	JSR SNDON		;START IT
	PLA
	TAY			;RESTORE AND EXIT
1$:	RTS
	.PAGE
	.SBTTL MULTIPLY

;AT ENTRY:
;(A)=MULTIPLICAND (SIGNED)
;(R1)=MULTIPLIER (80=1.000)
;
;AT EXIT:
;(A)=PRODUCT (SIGNED)
;Y,R1,R2,R3 DESTROYED
MULT::	TAY			;SET CONDITION CODES
	BPL 1$
	EOR #-1
	CLC
	ADC #1
1$:	STA R2
	LDA #0			;INITIALIZE PRODUCT
	STA R3
5$:	ASL R1			;CHECK BIT
	BCS 2$			;ADD IT IN
	BNE 3$			;STILL SOME BITS LEFT
6$:	LDA R3			;GET PRODUCT
	CPY #0			;TEST SIGN AND SET CARRY
	BPL 4$			;OK
	EOR #-1			;NEGATE PRODUCT
	ADC #0
4$:	RTS
2$:	LDA R3			;ACCUMULATE PRODUCT
	CLC
	ADC R2
	STA R3
3$:	LSR R2			;ADJUST MULTIPLICAND
	BNE 5$			;(MOST OF THE TIME WE SHOULD BRANCH)
	BEQ 6$
	.PAGE
	.SBTTL DISTANCE HANDLERS

; RANGE FINDER
; AT ENTRY:
; (TEMP2,A) = L,H DIFFERENCE TO RANGE
;
; AT EXIT:
; (TEMP2,A) = L,H DIFFERENCE RANGED.
; R5 DESTROYED

	.ENABL LSB
RANGE:: CMP #10
	BCC 1$		;OK
	CMP #-10
	BCS 1$		;OK
	STA R5		;SAVE HI BYTE
4$:	LDA #0
	SEC
	SBC TEMP2	;(TEMP2,A) = 0 - (TEMP2,A)
	STA TEMP2
	LDA #0
	SBC R5
1$:	RTS

RTST:	CMP #4			;1/8 SCREEN AWAY
	BCC 1$			;NO
	CMP #-4
	BCS 1$
	LDY BINSCR
	CPY #5			;SCORE>40,000?
	BCC RANGE		;NO. BE EASY
	LDY R9
	CPY #3			;MORE THAN 2 ENEMIES?
	BCC RANGE		;NO. BE EASY
	STA R5			;SAVE ACC
	TXA			;GET OBJ INDEX
	CPX #NOBJ+8		;CHECKING X?
	BCS 2$			;NO
	LSR
2$:	LSR
	ROR			;PUT X/Y BIT INTO BIT 7
	EOR R5			;GET SIGN OF DIFFERENCE MODIFIED BY X/Y BIT
	BMI 4$			;NEGATE DIFFERNECE
	LDA R5			;RESTORE ACC
	RTS			;AND EXIT
	.DSABL LSB
	.PAGE

; CPUTD - COMPUTE DISTANCE BETWEEN OBJECTS
; AT ENTRY:
;	Y = (0) SHIPX, (1) SAUCERX, (NOBJ+8) SHIPY, (NOBJ+9) SAUCERY
;	X = INDEX TO OBJECT TO TEST X , (INDEX+NOBJ+8) TO TEST Y
;
; AT EXIT:
;	(A) = MS 5 BITS OF DIFFERENCE (SIGN EXTENDED)
;	(TEMP2) = LSB'S OF DIFFERENCE

CPUTD::	LDA Y,OBJXL	;COMPUTE 16 BIT DIFFERENCE
	SEC
	SBC X,OBJXL
	STA TEMP2
	LDA Y,OBJXH
	SBC X,OBJXH
	RTS		;DONE
	.PAGE
; SCALER - SCALE THE DIFFERENCES
;
; AT ENTRY:
;	(R2,R3) = L,H X DIFFERENCE (SIGNED)
;	(TEMP2,A) = L,H Y DIFFERENCE (SIGNED)

; AT EXIT:
;	(A) = ANGLE BETWEEN OBJECTS
;	X,Y,R2,R3,R4,R5,TEMP2,TEMP2+1 DESTROYED

	.GLOBL COMP
SCALER::STA R4		;SAVE HIGH Y DIFFERENCE
	BPL 1$
	JSR COMP
1$:	STA R5		;SAVE ABS
	LDA R3		;GET HI X
	BPL 2$
	JSR COMP
2$:	ORA R5		;MERGE ABS(X) OR ABS(Y)
	LDX #7		;INITIALIZE X

4$:	ASL		;FIND POSITION OF MSB
	BMI 3$
	DEX
	BNE 4$		;UNTIL ALL 8 TESTED
3$:	CPX #4		;DIRECTION
	BCS 7$		;SHIFT LEFT

5$:	LSR R3		;SHIFT DIFFERENCE RIGHT N PLACES
	ROR R2
	LSR R4
	ROR TEMP2
	DEX
	BPL 5$
	LDX R2		;PASS X DIFFERENCE
	LDY TEMP2	;PASS Y DIFFERENCE
6$:	JMP ATAN

7$:	ASL R2		;SHIFT DIFFERENCE LEFT UNTIL BIT 15  IS SIGN
	ROL R3
	ASL TEMP2
	ROL R4
	INX
	CPX #7
	BCC 7$
	LDX R3		;PASS X DIFFERENCE
	LDY R4		;PASS Y DIFFERENCE
	BCS 6$		;(ALWAYS)
	.PAGE
	.SBTTL ENEMY PICTURE HANDLERS
	.GLOBL TFPIX

TRIPIX::
	LSR
	LSR
	LSR
	AND #0F
	TAX			;POINT TO CONTROL BYTE
	LDA X,SRTIME		;GET CONTROL
	LSR			;PUT SIZE INTO BIT 6
	LDA #0
	ROR
	ROR
	STA R1			;SAVE IT
	LDA X,SRANG		;GET ORIENTATION
	LSR
	LSR			;MAKE IT AN INDEX TO 1 OF 32 WORDS
	BIT R1			;BIG PIX?
	BVC 1$			;NOPE
	AND #1E			;YEP. ZAP THE MSB
1$:	AND #3E			;ZAP BIT 0
	ORA R1			;MAKE IT INDEX INTO FRM JSRLS IF BIG
	TAY
	LDX Y,TFPIX+1		;GET MSB OF JSRL
	LDA Y,TFPIX		;GET LSB OF JSRL
	JMP VGADD2		;STUF IT INTO VG RAM AND EXIT

	.IF NE,$DTHST
	.SBTTL SETTIP INITIALISE SNOW FLAKE TIPS
	.IFF
	.SBTTL SETTIP INITIALISE SPECIAL CLUSTER

	.GLOBL RNDPOS
	.IFTF
SETTIP::
	.IFF
	LDA DIFCTY
	LSR
	CMP NROCKS		;TOO MANY ROCKS?
	BCS 1$			;NO
2$:	RTS			;TOO MANY ROCKS


1$:	LDA SROCKS		;ONLY COME OUT AFTER 2ND WAVE
	CMP #2
	BCC 2$

	LDX SPROCK		;ALREADY HAVE SPECIALS?
	BNE 2$			;YEP. DON'T LAUNCH ANYMORE
	LDY NROCKS		;GET NUMBER OF ACTIVE OBJECTS
6$:	LDA X,OBJ		;SEARCH FOR ACTIVE BUT NOT EXPLODING OBJECT
	BNE 7$			;ACTIVE OR EXPLODING
	STX R0			;SAVE HIGHEST INDEX TO FREE OBJECT
7$:	BPL 8$			;NOT EXPLODING
	DEY			;EXPLODING. DON'T COUNT IT
8$:	INX			;NEXT OBJ
	CPX #NOBJ		;LIMIT?
	BCC 6$			;NOPE
	LDX PLAYR		;POINT TO PLAYER
	LDA X,TRILE		;LAUNCHED ANY THIS WAVE?
	BEQ 9$			;NO. DO IT ANYWAY
	CPY #3			;FEWER THAN 3 ITEMS?
	BCC 2$			;YES. DON'T LAUNCH
9$:	LDY #NOBJ+1		;POINT TO SAUCER VELOCITIES
	STY X,TRILE		;SET TRILE .NE. FOR NEXT TIME
	LDX R0			;POINT TO FREE OBJ
	JSR RNDPOS		;GET POSITION AND VELOCITY
	JSR RNDXYI		;GET RANDOM VELOCITY
	LDY #2
	STY HSSND		;SIGNAL TO MAKE NOISE WHEN CHANNEL AVAIL

5$:	TYA			;GET LINK
	ASL			;MOVE IT 2 BITS LEFT
	ASL
	ORA #42			;SAY SPECIAL AND MEDIUM SIZE
	STA X,OBJ		;SET UP
	INC NROCKS		;COUNT OBJ
	INC SPROCK
	LDA Y,ITIME		;GET INITIAL CONTROL DATA
	STA Y,SRTIME		;PASS IT
	LDA Y,IANG		;GET INITIAL ANGLE
	STA Y,SRANG
	LDA Y,ITXL		;GET INTIAL POSITION OFFSET
	CLC
	ADC X,OBJXL		;ADD IT IN
	STA X,OBJXL
	LDA Y,ITXH
	ADC X,OBJXH
	STA X,OBJXH
	LDA Y,ITYL
	CLC
	ADC X,OBJYL
	STA X,OBJYL
	LDA Y,ITYH
	ADC X,OBJYH
	STA X,OBJYH
	DEY			;COUNT DOWN
	BMI 2$			;DONE
	STX R0			;SAVE CURRENT INDEX
	JSR SEARC1		;GET NEXT FREE SPACE
	STY R1			;SAVE Y
	LDY R0			;POINT TO OLD SPACE
	JSR CPYPOS		;COPY POSITION PARAMETERS
	LDY R1			;RESTORE Y
	BPL 5$			;(ALWAYS)

ITXL:	.BYTE 0,58,70
ITXH:	.BYTE 0,-1,0
ITYL:	.BYTE 40,50,0
ITYH:	.BYTE -1,0,0
ITIME:	.BYTE 83,85,81
IANG:	.BYTE 0F0,98,40

RNDXYI:	JSR 1$			;DO THE FOLLOWING TWICE
	STA X,XINC		;SET UP X
1$:	LDY #6			;ASSUME +
	LDA RANDOM		;GET RANDOM #
	BPL 2$			;TRUE
	LDY #-6			;ELSE SET -
2$:	TYA
	STA X,YINC
	RTS
	.IFT
	LDX #6			;INITIALISE TIP PARAMETERS
	STX NROCKS
	DEX			;LDX #5
1$:	LDA #46			;SET TIP WAITING PIX
	STA X,OBJ
	LDA X,ITXL		;COMPUTE INITIAL X,Y
	CLC
	ADC SAUXL
	STA X,OBJXL
	LDA X,ITXH
	ADC SAUXH
	STA X,OBJXH
	LDA X,ITYL
	CLC
	ADC SAUYL
	STA X,OBJYL
	LDA X,ITYH
	ADC SAUYH
	STA X,OBJYH
	LDA X,ITANG		;INITIAL ANGLE
	STA X,SRANG
	LDA SAUXI		;SET VELOCITY SAME AS SNOWFLAKE
	STA X,XINC
	LDA #0
	STA X,YINC
	DEX
	BPL 1$
	RTS			;DONE

	.RADIX 10
	.NLIST BYT

	.MACRO ITXY X,Y
	.PRINT X*...FAC&255(16,2)
	.PRINT X*...FAC/256(22,2)
	.PRINT Y*...FAC&255(28,2)
	.PRINT Y*...FAC/256(34,2)
	.CSECT ITX.L
	.BYTE X*...FAC&255
	.CSECT ITX.H
	.BYTE X*...FAC/256
	.CSECT ITY.L
	.BYTE Y*...FAC&255
	.CSECT ITY.H
	.BYTE Y*...FAC/256
	.ENDM
...FAC=8
	.CSECT ITX.L
ITXL:
	.CSECT ITX.H
ITXH:
	.CSECT ITY.L
ITYL:
	.CSECT ITY.H
ITYH:
	ITXY 32,0
	ITXY 16,27
	ITXY -16,27
	ITXY -32,0
	ITXY -16,-27
	ITXY 16,-27
	.CSECT

ITANG:	.BYTE 0,42,88,128,170,216
	.ENDC
	.PAGE
	.SBTTL SINE/COSINE TABLES

	.RADIX 10
SINCOS::.BYTE 0,3,6,9,12,16,19,22	;SIN(0 TO 7)
	.BYTE 25,28,31,34,37,40,43,46
	.BYTE 49,51,54,57,60,63,65,68
	.BYTE 71,73,76,78,81,83,85,88
	.BYTE 90,92,94,96,98,100,102,104
	.BYTE 106,107,109,111,112,113,115,116
	.BYTE 117,118,120,121,122,122,123,124
	.BYTE 125,125,126,126,126,127,127,127	;SIN(0-63)
	.BYTE 127				;SIN(64)
	.PAGE
	.SBTTL DSTROT ASTEROIDS ROTATIONS
	.RADIX 16
	.GLOBL CPYVEC,VGRTSL,RSZB,RSOURC,ROCKSA,RVCC,CPXROT
;
; ROTAST - ASTEROID ROTATION ROUTINE.
;          THIS ROUTINE ROTATES 1 OF THE 4 DIFFERENT ASTEROID PICTURES
;	   EACH TIME IT IS CALLED. IT MUST, HOWEVER, ONLY BE CALLED WHEN
;	   THE VECTOR GENERATOR IS HALTED SINCE IT MODIFIES THE ASTEROID
;	   SUBROUTINES.
; AT ENTRY:
; (FRAME) = INDEX TO 1 OF 4 ASTEROIDS TO ROTATE
;
; AT EXIT:
; 1 OF THE 4 ASTEROID SUBROUTINES UPDATED WITH NEW ROTATION
;
; USES: R0,R1,R2,R3,R4,(VGLIST,VGLIST+1),A,X,Y

ROTAST::LDA FRAME		;GET INDEX
	AND #3
	TAX
	CLC
	ADC #-2			;COMPUTE ROTATION VELOCITY
	ADC X,ASTERS		;ROTATE THE ROCK
	STA X,ASTERS		;ACC = XXQQPPPX
				;  WHERE Q=QUADRANT,P=PICTURE CODE,X=?
	AND #0F0		;CPXROT ROUTINE NEEDS ACC TO = QQQPPPXX
	CLC			;SO WE SHIFT THE QQ 1 BIT LEFT AND INSERT A
				;  0 AFTER IT.
	ADC X,ASTERS
	ASL			;ACC = QQ0PPPXX
	JSR CPXROT		;COMPUTE INDEX INTO VECTOR TABLES
	LDA Y,RSOURC		;Y INDEXES INTO THE TABLE OF
	STA R0			;  ADDRESSES THAT POINT TO THE LIST OF VECTORS
	LDA Y,RSOURC+1		;    PERTAINING TO THE PICTURE. THE APPROPRIATE
	STA R1			;      ADDRESS IS COPIED INTO R0,R1.
	TXA			;TO ADD VARIETY, 2 OF THE 4 ROCK PICTURES ARE
	ASL			;  DISPLAYED IN A MIRROR IMAGE FORMAT. THESE
	TAX			;    INSTRUCTIONS BOTH ADJUST THE ROCK PICTURE
	ASL			;      CODE TO ADDRESS WORDS AND APPLIES THE
	AND #4			;        MIRROR IMAGE. THE MIRRORING IS
	EOR TEMP1		;	   DETERMINED BY THE CODE.
	STA TEMP1
	LDA X,ROCKSA		;GET LSB OF JSRL
	ASL			;MAKE IT A BYTE ADDRESS
	STA VGLIST
	LDA X,ROCKSA+1
	ROL
	EOR #0C0		;DROP BIT 15 AND SET BIT 14
	STA VGLIST+1
	LDX #RVCC		;GET COUNT OF VECTORS
	JSR CPYVEC		;MOVE VECTORS, MODIFYING AS REQUIRED
	JMP VGRTSL		;STUFF IN AN RTSL/RECURSE OR EXIT AS REQUIRED

	.END
                                                                                                                                                                             