$DAST	=1			;DELUXE ASTERIODS
	.LIST MEB
	.NLIST BYT,CND
	.IIF NDF,$DTHST,$DTHST=0
	.IIF NDF,$DAST,$DAST=0
	.IF NE,$DAST
	.TITLE DSTRD0 (29803) DELUXE ASTEROIDS
	.IFF
	.TITLE DTHSTR DEATH START
	.ENDC
	.ASECT
	.ENABLE AMA,LC
	.RADIX 16
;***********************************************
;*
;*DATE INITIATED:		12-MAY-80
;*
;*PROJECT CHARGE #:		29803
;*
;*DISK #:			53 B42
;*
;*HARDWARE REQUIREMENTS:	VECTOR HARDWARE WITH PAGE SELECT ON 2
;*
;*
;*MEMORY REQUIREMENTS:		VECTOR RAM:  4000-47FF (2K)
;*				VECTOR ROM:  4800-57FF (4K)
;*				PROGRAM ROM: 6000-7FFF (8K)
;*				SCRATCH:     PAGE 0
;*				STACK:	     PAGE 1
;*				PLAYER1:     PAGE 2
;;*				PLAYER2:     PAGE 3
;*
;*INTERRUPTS:			NMI (4 MS)
;*
;*ASSEMBLY COMMAND STRING:	R MAC65
;*				DSTRD0/A/C
;*
;*LINK COMMAND:			R LINKM
;*				DSTRD0.LNK
;*
;*PROGRAM DESCRIPTION:		THIRD PERSON VIEW OF A SPACE SHIP
;*				WITH ASTEROIDS THROUGHOUT SPACE.
;*				LARGE ASTEROIDS BREAK UP WHEN
;*				HIT AND SMALLER ASTEROIDS DISINTEGRATE
;*				WHEN HIT. A LARGE AND SMALL
;*				SAUCER ALSO APPEAR TO SHOOT AT
;*				THE SHIP. THIS PROGRAM IS AND IMPROVEMENT OF
;				"CASTRD".
;*
;*CONTROLS:			ROTATE LEFT, ROTATE RIGHT, THRUST, FIRE
;*				AND SHIELD BUTTONS
;*
;*******************************************************
	.SBTTL ************************
	.SBTTL *
	.SBTTL *PROGRAMMER: ED LOGG
	.SBTTL *PROGRAMMER: D. SHEPPERD
	.SBTTL *
	.SBTTL ************************
	.PAGE
	.SBTTL GLOBAL SYMBOL DECLARATIONS
;
;ENTRY POINTS
;
	.GLOBL START
;
;
;EXTERNAL ENTRY POINTS
;
	.GLOBL VGHALT,VGVCTR,VGRTSL,VGMSGA		;UTILITY ROUTINES(SEE VECUT.MAC)
	.GLOBL VGJMPL,VGJSRL,VGLABS
	.GLOBL VGADD,VGWAIT,VGCHAR
	.GLOBL VGHEX,VGHEXZ,VGSABS,VGDOT
	.GLOBL SHIPS,EXPPIC,SAUCER	;PICTURES OF SHIP AND ASTEROIDS
	.GLOBL VGMSG				;MESSAGE PROCESSOR
	.GLOBL PWRON,VGADD2				;ENTRY POINTS FOR ASTTST.MAC
	.GLOBL ASTMSG				;COPYRIGHT MESSAGE
	.GLOBL SINCOS,SHIP17
	.GLOBL EAUPD		;EA ROM R/W
;
;ZERO PAGE GLOBALS
;
	.GLOBL VGSIZE,XCOMP,TEMP1,VGLIST,VGBRIT
	.GLOBL SYNC,LOUT1,TEMP3,UPDFLG,SND3,FRAME,TEMP2,TEMP4,ASTERS
	.GLOBL $CCTIM,$$CRDT,$CMODE,$PSTSL,$LMTIM,$CNCT,$CNSTT,$INTCT
	.GLOBL $BCCNT,$BC,NPLAYR,CPMTST,CRMERR,HOLE,CKERR
;
; FOR REFERENCE ONLY
;
	.GLOBL CKSUM2,CKSUM3,CKSUM4

	.DCREF M

TRIEND	=4BD1		;NEXT AVAILABLE BYTE AFTER TRIROT
DVSTRT	=4D80		;FIRST BYTE USED IN DASVEC

	.MACRO ENTSEC
.IF EQ,DEVSYS
	.ASECT
....PC	=.
	.=...NPC
.ENDC
	.ENDM

	.MACRO XITSEC
.IF EQ,DEVSYS
.IIF GT,.-DVSTRT,.ERROR ;OVERFLOW
	.ASECT
...NPC	=.
	.=....PC
.ENDC
	.ENDM

...NPC	=TRIEND		;POINTER TO NEXT FREE BYTE AFTER TRIROT
	.PAGE

	.INCLUDE DSTDEC		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.MACRO SND ROUT,LABEL,J
	.GLOBL SND.'LABEL
	LDY #SND.'LABEL
	.IF NB,<J>
	JMP ROUT
	.IFF
	JSR ROUT
	.ENDC
	.ENDM

	.GLOBL R0,R1,R2,R3,R4,R5
	.GLOBL BOUNCE,SHDON,NOBJ,OBJ,SHLDS,CHIST,XINC,NEWVE1,YINC,SHPXI
	.GLOBL SHPXL,SHPXH,OBJXL,OBJXH,MOVE2,SNDON
	.INCLUDE PG0123		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
	.SBTTL MAIN LINE LOOP
	.GLOBL SETTIP
	.=6000
	.GLOBL NMI,BUFA,ROTAST,PKYTST
	.IF NE,DEVSYS
	LXL NMI
	LAH NMI
	STA A,0FFFB
	STX A,0FFFA
	LXL PWRON
	LAH PWRON
	STA A,0FFFD
	STX A,0FFFC
	JMP PWRON
	.ENDC
START:	JSR INIT		;INITIALIZE PLAYER 1 FOR START OF GAME
	LDA EAFLG		;E.A. ROM BUSY ERASING?
	BNE START1		;YEP. LEAVE IT ALONE
	STA EABC		;STARTING @
	STA EAX
	STA EAHSX		;INTO HS TABLE
	LDA #20			;READ COMMAND
	STA EAFLG
START1:	JSR NEWAST		;START UP NEW ASTEROIDS
START2:	BIT HALT		;WAIT FOR VG TO FINISH
	BMI START2
	.IF NE,$DAST
	JSR ROTAST		;ROTATE THE ASTEROIDS
	.ENDC
10$:	LSR SYNC		;WAIT FOR FRAME SYNCH
	BCC 10$
	LDA FRAME		;SET UP VG BUFFER
	AND #1			;EVEN/ODD
	ASL
	TAX
	EOR #2			;FILL THE OTHER ONE
	TAY
	LDA X,BUFA		;GET 'JMPL' INSTRUCTION
	STA VECRAM		;GIVE IT TO VG
	LDA X,BUFA+1
	STA VECRAM+1
	LDA Y,BUFA
	ASL
	STA VGLIST
	LDA Y,BUFA+1
	ROL
	AND #1F			;ZAP OFF THE OPCODE
	ORA #VECRAM/100		;MERGE IN 6502 ADDRESS
	STA VGLIST+1
	STA GOADD		;START VG
	STA WTDOG		;KICK THE DOG
	.IF NE,$DTHST
	INC TUMBLE		;SNOWFLAKE TUMBLER
	INC TUMBLE
	INC TUMBLE
	.ENDC
12$:	INC FRAME		;NEXT FRAME PLEASE
	BNE 22$
	INC FRAME+1		; COUNT TO 16 BITS
	LDA PROT+1		;MSB OF ADDRESS
	ORA #50			;CHECKSUM 5000-5800
	STA R1
	EOR #38			;CHECKSUM 6800-7000 TOO
	TAX
	EOR #18			;CHECKSUM 7000-7800
	STA R3
	LDA PROT		;GET LOW ADDRESS
	STA R0			;PUT CHECKSUM ADDRESS IN R0,R1
	STA R2			;ALSO IN R2,R3
	LDY #0			;INDEX. ALSO A ZERO FOR LATER
	LDA PROT+3		;GET ACCUM
	CLC
	ADC NY,R0		;CS=CS+(5000+N)
	STX R1
	ADC NY,R0		;CS=CS+(6800+N)
	ADC NY,R2		;CS=CS+(7000+N)
	ADC #0			;CS=CS+CARRY
	INC PROT		;NEXT ADDRESS
	BNE 11$			;NO OVERFLOW
	INC PROT+1		;HIGH ADDRESS
	CPX #6F			;END?
	BNE 11$			;NOPE
	STY PROT+1		;0 -> HIGH ADDRESS
	EOR #00			;SEED
	STA PROT+2		;SIGNAL ERROR OR NOT (S/B 0)
	LDX #-4			;MOVE STACK
	TXS
	STX HOLE		;PUT A HOLE ON THE STACK
	TYA			;0 -> ACC
11$:	STA PROT+3		;KEEP ACCUM
22$:	JSR EAUPD		;DO EA ROM STUFF
	JSR CHKST		;CHECK FOR START
	BCS 50$			;START NEW GAME
	JSR UPDATE		;UPDATE HIGH SCORE TABLES
	JSR GETINT		;GET INITIALS FOR ANY NEW HIGH SCORE
	BPL 20$			;UPDATE IN PROGRESS
	JSR SCORES		;DISPLAY HIGH SCORES
	BCS 20$			;WE ARE DISPLAYING SCORE TABLE
	LDA GDELAY		;(NOT ENOUGH TIME FOR ASTEROIDS AND SCORE TABLES)
	BNE 15$			;STARTING A NEW PLAYER
	JSR SHIELD		;CHECK FOR SHIELDS
	JSR FIRE		;FIRE SHIPS TORPEDOS
	JSR MOVE		;MOVE SHIP BY CONTROLS
	.IF NE,$DAST
	JSR SETTIP
	.ENDC
	JSR ENEMY		;LAUNCH ENEMY SAUCER AND TORPEDOS
15$:	JSR MOTION		;MOVE OBJECTS
	JSR COLIDE		;CHECK FOR COLLISIONS
20$:	JSR PARAMS		;DISPLAY SCORE AND OTHER PARAMETERS
	JSR SOUNDS		;GENERATE SOUNDS
	LDA I,1023./8
	TAX
	JSR VGSABS		;POSITION BEAM FOR MINIMUM CURRENT DRAW
	JSR VGHALT		;ADD HALT TO VECTOR LIST
	JSR PKYTST
	LDX HOLE		;ARE WE TO TEST?
	BEQ 21$			;NOPE. ONLY WORKS ONCE EXERY 2.5 HOURS
	LDA NPLAYR		;ATTRACT MODE?
	BEQ 21$			;YEP. WAIT UNTIL GAME STARTS
	PLA			;GRAB DATA OFF STACK
	STA R0
	PLA
	STA R1
	LDY #0
	STY HOLE		;COVER OUR TRACKS
	LAL CPMGV
	EOR NY,R0		;IS THE JSRL IN THE VG MEMORY?
	ORA CRMERR		;ACCUMULATE ERRORS
	STA CRMERR		;KEEP RESULT
	INY
	LAH CPMGV
	EOR NY,R0
	ORA CRMERR
	STA CRMERR		;S/B 0
21$:	LDA RDELAY
	BEQ 30$			;NO DELAY TO DECREMENT
	DEC RDELAY
30$:	ORA NROCKS
	BNE 40$				;LOOP FOR NEXT PASS
50$:	JMP START1		;START NEW SET OF ASTEROIDS
40$:	JMP START2
CKSUM2:	.BYTE 0		;CHECKSUM 6000-67FF
	.SBTTL CHKST-CHECK FOR START/END OF GAME
	.GLOBL Z.5,STEAROM
;CHKST	-CHECK FOR START/END OF GAME
;
;EXIT	(C)=SET IF STARTING A NEW GAME
	ENTSEC
	.ENABL LSB
CHKST:	LDA NPLAYR
	BEQ 10$			;GAME NOT IN PROGRESS
	LDA GDELAY
	BNE 60$			;STAY READY MODE
	JMP CHKST1		;WE ARE NOT IN PLAYER READY MODE

60$:	DEC GDELAY
	JSR CHKST2		;DISPLAY PLAYER NUMBER MESSAGE
30$:	CLC
	RTS
	
10$:	STA R3			;2 COIN MINIMUM FLAG
	LDA $CMODE		;GET PRICE CODE
	AND #3			;FREE PLAY?
	BNE 35$			;NOPE
	LDA #2			;ALWAYS HAVE 2 CREDITS
	STA $$CRDT
	BNE 15$			; (ALWAYS)

35$:	CLC
	ADC I,07
	TAY
	LDA UPDFLG		;UPDATING HI-SCORE?
	AND UPDFLG+1
	BPL 15$			;YES. NO MESSAGE
	JSR VGMSG		;GAME PRICE
	LDA $$CRDT
	CMP #64.		;BAD VALUE?
	BCS .			;YES. CRAP OUT
	STA R0			;SAVE IT
	LDY #11.		;CREDIT MESSAGE
	JSR VGMSG

	LDX #0			;CLEAR PRODUCT
	STX R1
	INX			;LDX #1
	STX R2			;CONVERTER
	SED			;DO THE FOLLOWING IN DECIMAL MODE

19$:	LSR R0			;GET DATA BIT
	BCC 17$			;DON'T HAVE ONE
	LDA R1			;ACCUMULATE IT
	CLC
	ADC R2
	STA R1
17$:	BEQ 18$			;DONE
	LDA R2			;DOUBLE CONVERTER VALUE
	ADC R2			; (CARRY S/B CLEAR HERE)
	STA R2
	BCC 19$			; (ALWAYS)

18$:	CLD			;BACK TO BINARY MODE
	LDX #0			;NO INTENSITY CHANGE
	LDY #1			;1 BYTE TO DISPLAY
	LDA #R1			;DISPLAY VALUE IN R2
	SEC			;ZERO SUPPRESS
	JSR DIGITS
	LDA $CMODE		;GET COIN MODES
	AND #3			;ISOLATE PRICE
	CMP #3			;50 CENT PLAY?
	BNE 15$			;NO. NEVER MIND
	LDA $CNCT
	LSR			;ANY 1/2 CREDITS?
	BCC 15$			;NO
	LAL Z.5			;YES. GET JSRL Z.5
	LXH Z.5
	JSR VGADD2		;DRAW IN A 1/2
	
15$:	LDY #6			;ASSUME 'PUSH START'
	LDX $$CRDT		;CREDIT?
	BNE 16$			;YEP
	STX TWOCM		;RESET 2 COIN MIN FLAG
	
16$:	LDA OPTN2
	LSR			;2 COIN MINIMUM OPTION?
	BCC 14$			;NO
	BIT TWOCM		;MINIMUM MET?
	BMI 14$			;YEP
	CPX #1			;2 OR MORE CREDITS?
	BCC 13$			;0 CREDITS
	BNE 14$			;2 OR MORE
	ROR R3			;1 CREDIT (CARRY=1)
13$:	LDY #12.		;POINT TO '2 COIN MINIMUM' MESSAGE
	BNE 21$

14$:	LDA #-1	
	STA TWOCM		;SIGNAL MINIMUM MET
	CPY #12.		;2 COIN MIN MESSAGE?
	BNE 12$			;NO
21$:	JSR BM			;DISPLAY MESSAGE
11$:	CLC
	LDA #0
	STA LOUT1		;NO LAMPS
	RTS			;BUT DON'T START
	
12$:	TXA			;ANY CREDITS?
	BEQ 11$			;NO DON'T START
	JSR BM			;BLINK 'PRESS START'
	LDY $$CRDT		;GET CREDITS
	LDX I,01
	LDA A,STRT1
	BMI 20$			;ONE PLAYER START
	CPY I,02
	BCC 40$			;ONLY 1 CREDIT
	LDA A,STRT2
	BPL 40$			;NO START YET
	STA BNKSEL		;SWITCH TO PLAYER 2
	JSR 42$			;START EA ROM
	JSR INIT		;REINITIALIZE MEMORY
	JSR NEWAST		;NEW ASTEROIDS
	JSR NEWSHP		;PUT SHIP IN MIDDLE
	LDA NHITS
	STA HITS+1		;ENABLE 2ND PLAYER
	LDX I,02
	DEC $$CRDT		;ONE CREDIT LESS
20$:	STX NPLAYR		;NUMBER OF PLAYERS
	DEC $$CRDT		;ONE CREDIT LESS
	STX BNKSEL		;PLAYER 1
	STX LOUT1		;SET LAMP CODE
	JSR 42$			;CHECK FOR EA START
	JSR INIT		;INITIALIZE MEM
	JSR NEWSHP		;PUT SHIP IN MIDDLE
	LDA I,80
	STA GDELAY
	ASL			;LDA I,0 SETS CARRY TOO
	STA PLAYR
	STA PLAYR2
	STA PLAYR3
	STA $BC			;RESET BONUS ACCUMULATOR
	STA $BCCNT		;RESET BONUS COUNTER
	LDA NHITS
	STA HITS		;NUMBER OF HITS ALLOWED
	LDA I,04
	STA THUMP2
	STA A,NRESET		;RESET NOISE GENERATOR
	RTS			;EXIT WITH CARRY SET
	
40$:	LDA FRAME
	AND I,0F
	BNE 45$			;DO NOT CHANGE LITE
	LDA #1			;ASSUME 2 PLAYER
	CMP $$CRDT		;MORE THAN 1 CREDIT?
	BEQ 46$			;NO
	LDA #3			;YES
46$:	EOR LOUT1
	STA LOUT1		;LET NMI WRITE TO OUT1
45$:	CLC
RTS.4:	RTS

42$:	LDA UPDFLG		;ANY HI-SCORES?
	AND UPDFLG+1
	BMI 45$			;NO
	JMP STEAROM		;YES. START EA ROM
	.DSABL LSB

BM:	LDA TWOCM
	ORA R3
	BPL 1$			;DON'T BLINK
	LDA FRAME
	AND #20			;ON/OFF
	BNE RTS.4		;OFF
1$:	JMP VGMSG

CHKST1:	LDA Z,FRAME
	AND I,3F
	BNE 70$			;ONLY EVERY 1 SECOND
	LDA THUMP3
	CMP I,08
	BEQ 70$			;AT FASTEST RATE NOW
	DEC THUMP3
70$:	LDX PLAYR
	LDA X,HITS
	BNE 60$			;IF HE STILL IN GAME
	LDA SHPTP+0		;ANY OF HIS MISSILES STILL FLYING?
	ORA SHPTP+1
	ORA SHPTP+2
	ORA SHPTP+3
	BNE 60$			;TORPEDO STILL ALIVE
	LDY I,7
	JSR VGMSG		;GAME OVER MESSAGE
	LDA NPLAYR
	CMP I,02
	BCC 60$			;1 PLAYER GAME
	JSR CHKST2		;DISPLAY PLAYER NUMBER
60$:	LDA SHPPIX
	.IF NE,$DTHST
	BEQ 62$			;NOT ALIVE
	BPL 80$			;ALIVE BUT NOT BLOWING UP
	LDX PLAYR
	LDA SFACT
	TXA
	CLC
	RTS
	.IFF
	BNE 80$			;STILL ALIVE
	.ENDC
62$:	LDA SDELAY
	CMP I,80
	BNE 80$			;SHIP RETURNING TO LIFE
	LDA I,10
	JSR SSBTLT
	LDX NPLAYR
	LDA HITS
	ORA HITS+1
	BEQ 90$			;GAME IS ALL OVER
	.IF EQ,$DTHST
	JSR RSAUCR		;RESET SAUCER VALUES
	.ENDC
61$:	DEX
	BEQ 80$			;ONE PLAYER NO MESSAGE NEEDED
	LDA I,80
	STA GDELAY		;DELAY BEFORE STARTING PLAYER
	LDA PLAYR
	EOR I,01
	TAX			;1 TO 0 AND 0 TO 1
	LDA X,HITS
	BEQ 80$			;NO HITS FOR THIS PLAYER
	STX PLAYR		;SET PLAYER NUMBER
	TXA
	ROR
	ROR
	STA BNKSEL		;SWITCH PLAYERS
	TXA
	ASL
	STA PLAYR2
	ORA PLAYR
	STA PLAYR3
80$:	CLC
	RTS

90$:	STX LPLAYR		;SAVE NUMBER OF PLAYERS IN THIS GAME
	LDA I,-1
	STA NPLAYR		;FLAG TO UPDATE HIGH SCORES
	LDA I,03
	STA LOUT1		;LET NMI WRITE TO LAMPS
	STA BNKSEL		;PLAYER 1
	BNE 80$			;(ALWAYS)
	
	XITSEC
CHKST2:	LDY I,1
	JSR VGMSG		;DISPLAY "PLAYER" MESSAGE
	LDY PLAYR
	INY
	TYA			;1 OR 2
	JMP VGHEX		;DISPLAY PLAYER NUMBER


	.SBTTL COLLIDE-COLLISION DETECTOR
COLIDE:	LSR CHIST		;CLEAR SHIP COLLISION FLAG
	LDX I,07
10$:	LDA X,SHPPIX
	BEQ 13$			;IF INACTIVE OBJECT
	BPL 15$			;NOT EXPLODING
13$:	DEX
	BPL 10$
	BIT CHIST		;DID SHIP COLLIDE WITH ANYTHING?
	BMI 1$			;YEP
	STX CHIST+1		;NOPE. INVALIDATE FLAG (X IS -1 FROM ABOVE)
1$:	LDX HOLE
	BEQ 2$			;NOT TIME TO TEST
	LDA VGLIST		;SAVE THE POSITION OF THE JSRL
	STA X,101		;ON THE HOLE IN THE STACK
	LDA VGLIST+1
	STA X,102
2$:	RTS
	
15$:	LDY I,NOBJ+1
	CPX I,04
	BCS 20$			;NOT SAUCER OR SHIP OR SAUCERS TORPEDOES
	DEY			;BYPASS SAUCER TO SAUCER COLISION
	TXA
	BNE 20$			;SHIP DOESN'T COLIDE WITH SHIP
19$:	DEY
	BMI 13$			;END OF LOOP
20$:	LDA Y,OBJ
	BEQ 19$			;IF INACTIVE
	BMI 19$			;IF AN EXPLOSION
	.IF NE,$DTHST
	CPX #1			;SNOWFLAKE?
	BNE 21$			;NO
	CPY #NOBJ		;ENEMY?
	BCC 13$			;YES. DON'T TEST
	.ENDC
21$:	STA TEMP2
	LDA Y,OBJXH		;DO A QUICK TEST BY SUBTRACTING THE HIGH BYTE
	SEC			;  FROM EACH OTHER AND TESTING FOR A DIFFERENCE
	SBC X,SHPXH		;  TO BE -2,-1,0,+1 OR +2
	SBC #3			; (NORMALISES RESULT TO BE -6 <= X <= -1
	CMP #-6			;IN RANGE ?
	BCC 19$			;NOPE. TOO FAR. SKIP IT
	LDA Y,OBJYH
;	SEC			;  (CARRY SET FROM ABOVE)
	SBC X,SHPYH
	SBC #3
	CMP #-6
	BCC 19$

	LDA Y,OBJXL		;TEST X DIRECTION
	SEC
	SBC X,SHPXL
	STA TEMP1
	LDA Y,OBJXH
	SBC X,SHPXH
	LSR
	ROR TEMP1
	ASL
	BEQ 25$			;IF WITHIN 64.
	BPL 19$			;TOO FAR AWAY
	EOR I,0FE
	BNE 19$			;TOO FAR AWAY
	LDA TEMP1
	EOR I,0FF
	ADC #0			;(CARRY SET FROM ABOVE)
	STA TEMP1		;ABS VALUE OF X DISTANCE BETWEEN OBJECTS
25$:	LDA Y,OBJYL
	SEC
	SBC X,SHPYL
	STA TEMP1+1
	LDA Y,OBJYH
	SBC X,SHPYH
	LSR
	ROR TEMP1+1
	ASL
	BEQ 35$			;IF WITHIN 64.
	BPL 19$			;TOO FAR AWAY
	EOR I,0FE
	BNE 19$			;TOO FAR AWAY
	LDA TEMP1+1
	EOR I,0FF
	ADC #0			;(CARRY SET FROM ABOVE)
	STA TEMP1+1		;DISTANCE-1 BETWEEN OBJECTS
35$:	LDA #4			;SIZE ACCUMULATOR
	CPX #1
	BEQ 42$			;SAUCER
	BCS 41$			;TORPEDO
	JSR SSZ			;SHIP. GET ITS SIZE
	BNE 41$			;(ALWAYS)
42$:
	.IF NE, $DTHST
	ADC #132.
	.IFF
	JSR SCRSZ		;GET SAUCER SIZE
	.ENDC

41$:	CPY #NOBJ		;ROCK?
	BCS 43$			;NO
	ADC #42.		;SMALLEST ROCK/ENEMY SIZE
	LSR TEMP2
	BCS 38$			;SMALL
	ADC #30.
	LSR TEMP2
	BCS 38$			;MEDIUM
	ADC #60.		;LARGE
	BCC 38$			;(ALWAYS)

43$:	BEQ 44$			;SHIP
	.IF NE, $DTHST
	ADC #132.		;SAUCER IS HUGE
	.IFF
	JSR SCRSZ		;SAUCER/SNOWFLAKE
	.ENDC
	BNE 38$			;(ALWAYS)

44$:	JSR SSZ			;SHIP
38$:	CMP TEMP1
	BCC 40$			;NO HIT
	CMP TEMP1+1
	BCC 40$			;NO HIT
	STA TEMP2		;COMPUTE 1.5 * ABS(MINIMUM DIFF)
	LSR			
	CLC
	ADC TEMP2
	ROR			;SCALE IT
	STA TEMP2		;3/2 DISTANCE (NO CARRY IF LESS THAN 172.)
	LDA TEMP1+1		;COMPUTE ABS(DIFFX) + ABS(DIFFY)
	ADC TEMP1
	ROR			;SCALE IT
	CMP TEMP2		;CHOP OFF CORNERS
	BCS 40$			;MISSED
	TXA			;SAVE X
	PHA
	JSR DSTRCT		;BLOW 'EM UP
	PLA			;RESTORE X
	TAX
39$:	LDY #0			;CAUSE A 'JMP 13$'
40$:	JMP 19$

SSZ:	BIT SHDON		;SHIELDS UP?
	BPL 1$			;NO
	ADC #8			;YES. USE SLIGHTLY LARGER PIX
1$:	ADC #28.		;SHIP SIZE
	RTS

SCRSZ:	ADC #28.		;ASSME SMAL SAUCER
	PHA
	LDA SAUPIX
	LSR
	PLA
	BCS 2$			;IS SMALL
	ADC #18.		;LARGE
2$:	RTS
	.PAGE
	.SBTTL CPYPOS - COPY ATTRIBUTES OF ROCK
	.GLOBL CPYPOS
;CPYPOS - COPY ATTRIBUTES OF ROCK
;
;ENTRY	(X)=NEW ROCK INDEX
;	(Y)=OLD ROCK INDEX
CPYPOS:	LDA Y,OBJ		;COPY PICTURE
	AND I,07
	STA TEMP1		;SAVE SIZE
	LDA RANDOM		;RANDOM NUMBER
	AND I,18		;PICTURE NUMBER
	ORA TEMP1
	STA X,OBJ
	LDA Y,OBJXL		;COPY POSITION
	STA X,OBJXL
	LDA Y,OBJXH
	STA X,OBJXH
	LDA Y,OBJYL
	STA X,OBJYL
	LDA Y,OBJYH
	STA X,OBJYH
	LDA Y,XINC		;COPY VELOCITY
	STA X,XINC
	LDA Y,YINC
	STA X,YINC
	RTS
	
	
	.SBTTL CPYVXY/CPYVYX - COPY AND MODIFY VECTORS
; CPYVXY COPY AND MODIFY VECTORS
;
;ENTRY	(TEMP1)=MASK FOR X SIGN (0 OR 4)
;	(TEMP1+1)=MASK FOR Y SIGN (0 OR 4)
;	(X)=COUNT OF VECTORS TO MOVE
;	(R0,R1)= @ OF VECTOR LIST
;	(R2) = + IF NO X/Y SWAP TO TAKE PLACE
;EXIT	(VGLIST,VGLIST+1)=UPDATED VECTOR LIST POINTER
;	(R0,R1),R2 UNMODIFIED
;	(Y)=INDEX TO LAST BYTE OF VECTOR TABLE
;USES	A,X,Y,R3,R4
CPYVEC::LDY I,-1
	BIT R2			;SWAP?
	BMI CPYVYX		;YEP
10$:	INY
	INY
	LDA NY,R0		;GET OPCODE BYTE
	EOR TEMP1+1		;APPLY ANY SIGN CHANGES
	STA NY,VGLIST		;STUFF IT IN VG RAM
	DEY			;BACK UP TO LSB
	CMP #0F0		;SHORT VECTOR?
	BCS 20$			;YEP.
	LDA NY,R0		;COPY REST
	STA NY,VGLIST
	INY
	INY
	LDA NY,R0
	STA NY,VGLIST
	INY
	LDA NY,R0
	EOR TEMP1		;APPLY ANY SIGN CHANGES
	STA NY,VGLIST
15$:	DEX			;COUNT
	BPL 10$
	JMP VGADD		;UPDATE VGLIST
	
20$:	LDA NY,R0		;SHORT VECTOR INSTRUCTION
	EOR TEMP1		;MASK FOR X SIGN
	STA NY,VGLIST
	INY
	BNE 15$			;ALWAYS
	
	.SBTTL CPYVYX COPY AND MODIFY VECTORS
;
; AT ENTRY: (SAME AS CPYVXY ABOVE)
;
; USES R3,R4,A,X,Y

CPYVYX:
2$:	INY
	LDA NY,R0		;GET LOW BYTE OF VECTOR INSTRUCTION
	STA R4			;SAVE IT
	INY
	LDA NY,R0		;GET OPCODE BYTE OF VECTOR
	CMP #0F0		;TYPE?
	BCS 1$			;SHORT
	INY			;LONG. SKIP TO MSB OF X PART
	INY
	EOR NY,R0		;'A' = (OPCODE + MSB Y) .XOR. (Z + MSB X)
	AND #0F			;'A' = (MSB Y) .XOR. (MSB X)
	STA R3			;SAVE IT
	EOR NY,R0		;'A' = (MSB Y) .XOR. (MSB X) .XOR. (Z + MSB X)
	EOR TEMP1		;APPLY SIGN CHANGE
	STA NY,VGLIST		;STUFF (Z + MSB Y) TO VG
	DEY			;BACK UP TO LS PART OF X
	LDA NY,R0		;GET LS X
	PHA			;SAVE IT
	LDA R4			;GET LS Y
	STA NY,VGLIST		;STUFF IT TO VG
	DEY			;BACK UP TO OPCODE BYTE
	LDA R3			;GET (MSB Y) .XOR. (MSB X)
	EOR TEMP1+1		;APPLY SIGN CHANGE
	EOR NY,R0		;'A' = (MSB Y) .XOR. (MSB X) .XOR. (OPCODE + MSB Y)
	STA NY,VGLIST		;STUFF (OPCODE + MSB X) TO VG RAM
	DEY			;BACK UP TO FIRST BYTE OF INSTRUCTION
	PLA			;GET LS X
	STA NY,VGLIST		;PUT IT IN VG RAM
	INY			;SKIP UP TO NEXT WORD
	INY
5$:	INY
	DEX			;COUNT
	BPL 2$			;CONTINUE
	JMP VGADD

1$:	EOR R4			;'A' = (Z + XAS + X) .XOR. (OPCODE + YAS + Y)
	AND #07			;'A' = X .XOR. Y
	PHA			;SAVE IT
	EOR NY,R0		;'A' = X .XOR. Y .XOR. (OPCODE + YAS + Y)
	EOR TEMP1+1		;APPLY ANY SIGN CORRECTION
	STA NY,VGLIST		;STUFF (OPCODE + YAS + X) TO VG RAM
	DEY			;BACK UP
	PLA			;'A' = X .XOR. Y
	EOR NY,R0		;'A' = (Z + XAS + X) .XOR. Y .XOR. X
	EOR TEMP1		;APPLY ANY SIGN CORRECTION
	STA NY,VGLIST		;STUFF (Z + XAS + Y) TO VG RAM
	BCS 5$			;(ALWAYS; CARRY STILL SET FROM ENTRY)
	.PAGE
	.SBTTL DSTRCT-DESTRUCTION DURING COLLISION
;DSTRCT-DESTRUCTION DURING COLLISION
;
;ENTRY	(X)=SHIP, SAUCER OR TORPEDO INDEX-NOBJ
;	(Y)=ROCK, SHIP OR SAUCER INDEX
;
	.IF NE,$DTHST
	.GLOBL CLRSFP
	.ENDC
	.ENABL LSB
DSTRCT:	JSR BOUNCE		;SEE IF WE SHOULD BOUNCE
	BCS 80$			;BLOW UP SAUCER.
				;RETURNS IF NO SHIELDS
				;ELSE DOESN'T RETURN AT ALL
	CPX I,01
	BNE 60$			;NOT SAUCER HITTING SHIP OR ROCKS
	.IF NE,$DTHST
	CPY #NOBJ
	BNE 90$			;IGNORE SF TO ROCK
	.ENDC
1$:	CPY I,NOBJ
	BNE 62$			;SAUCER HIT ROCK
	DEX			;X=0
	INY			;Y=NOBJ+1
60$:	TXA
	BNE 63$			;IF NOT SHIP HIT A ROCK
	JSR 10$			;SHIP CRASHED. TAKE A LIFE
62$:	LDA I,0A0
	STA X,SHPPIX		;EXPLOSION TIMER
	LDA I,0
	STA X,SHPXI		;STOP SHIP/SAUCER/TORPEDO
	STA X,SHPYI
61$:	CPY I,NOBJ
	BCC 65$			;SHIP OR SAUCER HITTING ROCK
	BCS 80$			;SHIP & SAUCER COLLIDE

63$:	LDA I,0
	STA X,SHPPIX		;CLEAR TORPEDO
	CPY I,NOBJ
	BEQ 75$			;HIT SHIP WITH TORPEDO
	BCS 80$			;HIT SAUCER WITH TORPEDO
65$:	JSR SPLIT		;SPLIT UP ROCKS

BLOUP::	LDA Y,OBJ
	AND I,03		;SIZE 0=SMALL,1=MEDUIM,2=LARGE
	EOR I,02		;2=SMALL,3=MEDUIM,0=LARGE
	LSR
	ROR
	ROR
	ORA I,3F		;LENGTH OF EXPLOSION
	STA LEXPSND
	LDA I,0A0		;TIMER FOR EXPLOSION
	STA Y,OBJ		;STOP OBJECTS MOTION
	LDA I,0
	STA Y,XINC
	STA Y,YINC
90$:	RTS
	
75$:	JSR 10$			;SHIP CRASHED. TAKE A LIFE
	BNE BLOUP		; (ALWAYS)

10$:	TXA			;SAVE X
	LDX PLAYR
	DEC X,HITS		;TAKE A LIFE
	TAX			;RESTORE X
	LDA #81			;DELAY BEFORE RENTRY
SSBTLT:	STA SDELAY
	.IF NE, $DTHST
	LDA #0
	STA SFODIS
	LDA #7
	STA SFBRIT		;BRIGHTEN SF
	STA SFDIS		;DISABLE TIPS
	.ENDC
	LDA #5
	STA SBTLT
	RTS

80$:
	.IF NE, $DAST
	LDA SEDLAY
	STA EDELAY		;DELAY BEFORE ENTERING SAUCER
	LDA NPLAYR
	BEQ BLOUP		;IF IN ATTRACT
	LDA SAUPIX
	LSR
86$:	LDA I,00		;1000 FOR SMALL
	BCS 85$			;IF SMALL SAUCER
	LDA I,20		;200 POINTS FOR LARGE SAUCER
85$:	JSR POINTS		;ADD 1000 PTS AND CHECK FOR 10K
	JMP BLOUP
	.ENDC

	.IF NE, $DTHST
	LDA #7
	STA SFBRIT		;BRITE SF
	LDA SAUPIX
	CLC
	ADC #18			;COUNT TORPEDO COLLISION
	STA SAUPIX
	BPL 91$			;DON'T BLOW UP YET
	
	LDY #5			;RELEASE ALL TIPS LEFT ON SNOWFLAKE
52$:	LDA Y,OBJ		;GET PIX CODE
	ASL
	BCS 51$			;BLOWING UP
	BPL 51$			;NOT A TIP
	LDA #3E			;RELEASE IT AS A BIG ONE
	STA Y,OBJ
51$:	DEY
	BPL 52$
	LDY #6		;USE EMPTY CELL
	LDA SAUXH		;COPY POSITION
	STA OBJXH+6
	LDA SAUYH
	STA OBJYH+6
	INC NROCKS		;COUNT IT AS OBJECT
	SEC
	LDA #0
	JSR POINTS		;ADD 1K
	JSR BLOUP
	LDY #NOBJ+1		;RESTORE Y
	JMP CLRSFP		;ZAP SNOWFLAKE FROM SCREEN
	
91$:	TXA			;TORPEDO HIT SF?
	BNE 92$			;YES. EXIT
	LDA #0BF
	STA LEXPSNP		;SET EXP SOUND TIMER
92$:	RTS
	.ENDC
	.DSABL LSB
	.PAGE
	.SBTTL ENEMY-LAUNCH EMEMY SAUCER
	.GLOBL SNDOFF
;ENEMY	-LAUNCH ENEMY SAUCER
;
	.ENABL LSB
ENEMY:	LDA FRAME
	AND #3			;ONLY EVERY 4TH FRAME
	BEQ 1$			;
50$:	RTS
1$:	LDA SAUPIX		;SAUCER
	BEQ 15$			;NOT ALIVE
	BPL 16$			;ALIVE. GO SHOOT
	SND SNDOFF,LS,JMP	;BLOWING UP

16$:	JMP EFIRE		;GO SHOOT
	
15$:	JSR SRSAUC		;POSITION OFF SCREEN
	LDA NPLAYR
	BEQ 6$			;IF IN ATTRACT SEND IN SAUCER
	LDA SHPPIX
	BEQ 50$			;IF YOU ARE NOT VISIBLE
	BMI 50$			;IF EXPLODING
6$:	LDA RTIMER
	BEQ 2$			;IF TIMER ALREADY
	DEC RTIMER		;DECREMENT ZERO TIMER
2$:	DEC EDELAY
	BNE 50$			;NO TIME YET
	LDA I,01		;IF 18., THEN GAME CAN PLAY INDEFINITE
	STA EDELAY		;DELAY BEFORE SHOOTING OR ENTERING
	.IF NE, $DTHST
	RTS
	.IFF
	LDX NROCKS
	BEQ 50$			;NO ROCKS
	LDA RTIMER
	BEQ 5$			;IF NO ROCKS HIT ENTER SAUCER
	CPX DIFCTY
	BCS 50$			;TOO MANY ROCKS
5$:	LDA SEDLAY
	SEC
	SBC I,06
	CMP I,20
	BCC LSF			;IF BELOW MINIMUM
	STA SEDLAY
	.ENDC

LSF:	LDA RANDOM		;RANDOM NUMBER
	LSR
	ROR A,SAUYL
	LSR
	ROR A,SAUYL
	LSR
	ROR A,SAUYL
	ADC #4
	CMP I,12
	BCC 10$			;MUST BE 0 TO 767
	SBC #10
10$:	STA A,SAUYH	;STARTING VERTICAL POSITION
	LDA RANDOM		;RANDOM NUMBER
	ASL			;DIRECTION INTO CARRY
	LDA #0			;ASSUME START ON LEFT
	TAX			;LOX #0
	LDY #10			;VELOCITY +
	BCC 20$
	DEX			;LDX #-1
	LDA #1F
	LDY #-10
20$:	STY SAUXI		;VELOCITY IN X
	STA SAUXH		;X POS MSB
	STX SAUXL		;X POS LSB
	LDY I,02
	.IF NE,$DAST
	LDA DIFCTY
	SEC
	SBC NROCKS		;DIFCTY-NROCKS
	CMP #4			;DIFFERENCE LARGE?
	BCC 40$			;NO. USE SLUGGO
	DEY			;SMALL SAUCER
	.ENDC
40$:	STY SAUPIX		;USE MEDUIM SIZE PICTURE
	LDA Y,SPSND-1
	TAY
	JMP SNDON		;TURN ON SAUCER SOUND
	.DSABL LSB
	.GLOBL SND.LS,SND.BS
SPSND:	.BYTE SND.LS,SND.BS

	
	.SBTTL EFIRE-ENEMY FIRE CONTROL
;EFIRE-ENEMY FIRE CONTROL
;
	.IF NE,$DTHST
	.GLOBL RELTIP
	.ENDC
	.GLOBL CPUTD,RANGE,SCALER
EFIRE:	LDA FRAME
	ASL
	BNE 10$			;NOT TIME TO CHANGE DIRECTION
	.IF NE, $DAST
	LDA RANDOM		;RANDOM NUMBER
	AND I,03
	TAX
	LDA X,99$
	STA SAUYI
	.ENDC
10$:	LDA NPLAYR
	BEQ 30$			;IF IN ATTRACT
	LDA SDELAY
	BNE 40$			;DONT FIRE IF YOU ARE DEAD
30$:	DEC EDELAY
	BEQ 50$			;TIME TO SHOOT
40$:	RTS
	
50$:	LDA I,10.
	STA EDELAY		;DELAY BEFORE NEXT SHOT
	.IF NE, $DAST
	.IFF
	JMP RELTIP		;TRY TO RELEASE TIP
	.IFT
	LDY #NOBJ		;POINT TO SHIP
	LDA NPLAYR		;ATTRACT MODE?
	BEQ 82$			;YES. SHOOT AT ROCK
	LDA RANDOM		;RANDOM NUMBER
	LDX PROT+2		;CHECKSUMM ERRORS?
	BNE 96$			;YEP. SHOOT WILD
	LDX #256./3*2		;SHOOT AT PLAYER 2 OUT OF 3
	LDA SAUPIX
	LSR
	BCS 80$			;LITTLE
	LDX #256./4		;SHOOT AT PLAYER 1 OUT OF 4
80$:	CPX RANDOM		;TEST
	BCS 81$			;SHOOT @ PLAYER
82$:	JSR LFCR		;SHOOT @ ROCK
81$:	STY R8			;SAVE Y
	LDX #NOBJ+1		;SAUCER IS DOING THE SHOOTING
	JSR CPUTD		;COMPUTE X DISTANCE
	JSR RANGE		;CHECK DIRECTION
	STA R3			;SAVE DIFFERENCE
	LDA TEMP2
	STA R2
	LDA R8			;GET OBJ PTR
	CLC
	ADC #NOBJ+8
	TAY
	LDX #2*NOBJ+9		;POINT TO Y PARAMETERS
	JSR CPUTD		;COMPUTE Y DISTANCE
	JSR RANGE		;BE REAL MEAN
	JSR SCALER		;SCALE DIFFERENCES, GET ARCTAN
	STA ANGLE+1
	LDA R8
	CMP #NOBJ		;SHOOTING AT SHIP?
	BNE 91$			;NO. BE QUITE ACCURATE
	LDX PLAYR3		;PLAYER NUMBER * 3
	LDA X,SCORE+2		;MSD OF SCORE
	LDX #0
	CMP 6			;SCORE > 60,000?
	BCC 90$			;NO
	INX			;GET MAD
90$:	LDA RANDOM		;RANDOM NUMBER
	AND X,97$
	BPL 95$			;NO SIGN EXTENSION
	ORA X,98$
95$:	ADC ANGLE+1		;DONT BE TOO GOOD-JUST CLOSE
96$:	STA ANGLE+1		;ANGLE TO AIM
91$:	LDY I,03		;START LOOKING HERE
	LDA I,01		;FIRE FOR SAUCER
	STA TEMP3+1		;2 SAUCER TORPEDOS
	LDX R8			;POINT TO OBJ
	STA R8			;SAUCER INDEX
	JMP FIRE1		;FIRE A TORPEDO
	
97$:	.BYTE 8F,87		;(GOOD,REAL GOOD) SMALL SAUCER
98$:	.BYTE 70,78
	.ENDC
99$:	.BYTE -10,0,0,10	;DIFFERENT SAUCER VELOCITIES

	.PAGE
;LOOK FOR CLOSE ROCK
;AT ENTRY;
;(Y) MUST=NOBJ
;AT EXIT:
;(Y)=@ OF ROCK TO SHOOT AT OR # NOBJ IF NO ROCKS
LFCR:	DEY
2$:	LDA Y,OBJ
	BNE 1$
3$:	DEY
	BPL 2$

	LDY #NOBJ		;REALLY NO ROCKS SO SHOOT @ SHIP
	SEC
	RTS

1$:	BMI 3$			;BLOWING UP

	CMP #40			;SPECIAL ROCK?
	BCC 4$			;NO
	LSR
	LSR
	TAX
	LDA X,SRTIME-10		;IS IT FLYING?
	BPL 3$			;YEP. SKIP IT
	CLC
	RTS			;SHOOT IT ANYWAY

4$:	LDA SAUXH		;GET ABS (DIFFX)
	SEC
	SBC Y,OBJXH
	BPL 6$
	EOR #-1
6$:	CMP #8			;ARE THEY CLOSE IN X?
	BCS 3$			;NO. FORGET IT
	LDA SAUYH		;GET ABS (DIFFY)
	SEC
	SBC Y,OBJYH
	BPL 7$
	EOR #-1
7$:	CMP #8			;ARE THEY CLOSE IN Y?
	BCS 3$
	RTS

	.SBTTL FIRE-FIRE SHIPS TORPEDOS
;FIRE-	FIRE SHIP TORPEDOS
;
FIRE:	LDA NPLAYR
	BEQ FIRE2		;IN ATTRACT
	BIT SHDON		;SHIELDS?
	BMI FIRE2		;YEP. CAN'T FIRE
	ASL A,FIRESW		;FULLY DECODED FOR R/W
	ROR LASTSW
	BIT LASTSW
	BPL FIRE2		;BUTTON NOT ON
	BVS FIRE2		;BUTTON NOT DIFFERENT FROM LAST TIME
	LDA SDELAY		;FIRE
	BNE FIRE2		;SHIP NOT VISIBLE YET
	STA R8			;POINT TO SHIP
	LDA I,03
	STA TEMP3+1		;STOPPING INDEX FOR SHIP
	LDX #NOBJ		;POINT TO SHIP
	LDA ANGLE
	STA ANGLE+1		;INDICATE DIRECTION
	LDY I,7			;NUMBER OF TORPEDOS ALLOWED
FIRE1:	LDA Y,SHPPIX		;SHIP/SAUCER TORPEDO LAUNCH
	BEQ FIRE3		;WE FOUND INACTIVE ONE
	DEY
	CPY TEMP3+1
	BNE FIRE1
FIRE2:	RTS			;FIND INACTIVE TORPEDO TO USE
	
;AT ENTRY:
;(Y)=POINTER TO TORPEDO
;(X)=POINTER TO OBJECT
;(R8)=SHIP/SAUCER INDEX
	
FIRE3:	STX TEMP3
	LDA I,12
	STA Y,SHPPIX		;SET TIMER FOR LENGTH OF LIFE
	LDA ANGLE+1
	JSR COS			;COS(ANGLE)-SHIPS SPEED=X CHANGE TO TORPEDO
	LDX TEMP3
	CMP I,80		;DIVIDE BY 2
	ROR			;SS999.BBB
	STA TEMP1+1
	CLC
	ADC X,XINC		;ADD IN VELOCITY OF OBJECT
	BMI 23$			;IF NEGATVE
	CMP I,70
	BCC 30$			;IF MAX NOT EXCEEDED
	LDA I,6F
	BNE 30$			;ALWAYS
	
23$:	CMP I,-6F
	BCS 30$			;IF MIN NOT EXCEEDED
	LDA I,-6F
30$:	STA Y,SHPXI		;SET X SPEED
	LDA ANGLE+1
	JSR SIN			;SIN (ANGLE)
	LDX TEMP3
	CMP I,80		;DIVIDE BY 2
	ROR			;SSAAA.BBB
	STA TEMP2+1
	CLC
	ADC X,YINC		;ADD IN VELOCITY OF OBJ
	BMI 33$			;IF NEGATIVE
	CMP I,70
	BCC 40$			;IF IN RANGE
	LDA I,6F		;SET MAX
	BNE 40$			;ALWAYS
	
33$:	CMP I,-6F
	BCS 40$			;IF IN RANGE
	LDA I,-6F
40$:	STA Y,SHPYI
	LDX I,0
	LDA TEMP1+1		;SCALE TO PUT TORP AT NOSE OF SHIP
	BPL 45$			;SIGN EXTENSION
	DEX			;LDX I,0FF
45$:	STX TEMP1
	LDX R8			;SHIP/SAUCER INDEX
	CMP I,80
	ROR
	CLC
	ADC TEMP1+1		;MULTIPLY BY 3/2
	CLC
	ADC X,SHPXL		;ADD SHIP/SAUCER POSITION TO GET STARTING POSITION
	STA Y,SHPXL		;OF TORPEDO
	LDA TEMP1
	ADC X,SHPXH
	STA Y,SHPXH
	LDX I,0
	LDA TEMP2+1		;SCALE AGAIN TO PUT AT NOSE
	BPL 50$			;SIGN EXTENSION
	DEX			;LDX I,0FF
50$:	STX TEMP2
	LDX R8			;SHIP/SAUCER INDEX
	CMP I,80
	ROR
	CLC
	ADC TEMP2+1		;MULTIPLY BY 3/2
	CLC
	ADC X,SHPYL		;ADD SHIPS POSITION TO GET STARTING POSITION
	STA Y,SHPYL
	LDA TEMP2
	ADC X,SHPYH
	STA Y,SHPYH
	LDY #SND.PF		;ASSUME WE'RE TO DO PLAYER SOUND
	CPX #1			;SHIP/SAUCER SELECT INTO CARRY
	BCC 51$			;PLAYER
	LDY #SND.SF		;SAUCER
51$:	JMP SNDOO		;GO TURN ON SOUND
	.GLOBL SND.PF,SND.SF,SNDOO
	.PAGE
	.SBTTL GETINT-GET PLAYERS INITIALS FOR HIGH SCORE
;GETINT-GET PLAYERS INITIALS FOR HIGH SCORE
;
GETINT:	LDA UPDFLG
	AND UPDFLG+1
	BPL 10$			;GET PLAYERS INITIALS
	LDA NPLAYR		;ATTRACT?
	BNE 11$			;NO
	JSR INISOU		;RESET SOUNDS
11$:	LDA #-1			;MUST RETURN NEGATIVE
	RTS
	
10$:	LDA LPLAYR
	LSR
	BEQ 25$			;IF LAST GAME WAS 1 PLAYER GAME
	LDY I,1
	JSR VGMSG		;DISPLAY MESSAGE 1
	LDY I,02
	LDX UPDFLG+1
	BPL 20$			;IF PLAYER 2
	DEY			;LDY I,01
20$:	STY PLAYR
	LDA FRAME
	AND I,10
	BNE 25$			;FLASH PLAYER NUMBER
	TYA
	JSR VGHEX		;DISPLAY PLAYER NUMBER
25$:	LSR PLAYR		;0 OR 1
	JSR SBANK		;SET BANK FOR PLAYER CONTROLS
	LDY I,2
	JSR VGMSG		;DISPLAY MESSAGE 2 - INSTRUCTIONS
	LDY I,3
	JSR VGMSG
	LDY I,4
	JSR VGMSG
	LDY I,5
	JSR VGMSG
	LDA I,20
	STA VGSIZE		;USE LARGER CHARACTER FOR INITIALS
	LDA I,400./4
	LDX I,228./4
	JSR VGSABS		;POSITION BEAM
	LDA I,70
	JSR VGWAIT		;WAIT FOR BEAM
	LDX PLAYR
	LDY X,UPDFLG
	STY TEMP2
	TYA
	CLC
	ADC UPDINT
	STA TEMP2+1		;INDEX FOR THE INITIAL WE ARE WORKING ON
	JSR INITAL		;DISPLAY INITIAL
	LDY TEMP2
	INY
	JSR INITAL		;DISPLAY INITIAL
	LDY TEMP2
	INY
	INY
	JSR INITAL		;DISPLAY THIRD INITIAL
50$:	ASL HYPSW
	ROL LASTSW		;SWITCH DEBOUNCE
	LDA LASTSW
	AND I,1F
	CMP I,07
	BNE 60$			;NOT A VALID SWITCH
	INC UPDINT		;ADVANCE TO NEXT LETTER
	LDA UPDINT
	CMP I,03
	BCC 55$			;IF WE ARE NOT DONE
	LDX PLAYR
	LDA I,-1
	STA X,UPDFLG		;CLEAR UPDATING FLAG
54$:	LDX I,0
	STX PLAYR		;SET PLAYER NUMBER
	STX UPDINT		;START NEXT PLAYER
	LDX I,0F0		;PREVENT TIMEOUT IF BOTH PLAYERS SET HIGH SCORE
	STX FRAME+1		;BRING UP HIGH SCORE TABLE NEXT
	LDA UPDFLG		;LAST?
	BPL 51$			;NO
	JSR STEAROM		;START EAROM
51$:	JMP SBANK		;SET CONTROLS FOR PLAYER 1
	
55$:	INC TEMP2+1
	LDX TEMP2+1
	LDA I,0F4		;ABOUT 64 SECONDS
	STA FRAME+1		;RESET TIMEOUT
	LDA I,11.
	STA X,INITL		;SET INITIAL TO A
60$:	LDA FRAME+1
	BNE 65$			;NO TIMEOUT
	LDA I,-1
	STA UPDFLG
	STA UPDFLG+1		;STOP INITIALS
	BMI 54$			;ALWAYS

65$:	LDA FRAME
	AND I,07
	BNE 90$			;EVERY 8TH FRAME
	LDX TEMP2+1		;SET UP X
	LDY X,INITL		;GET INITIAL
	BIT ROTL		;LEFT?
	BPL 70$			;NOPE
	INY			;+1
70$:	BIT ROTR		;RIGHT?
	BPL 75$			;NOPE
	DEY			;-1
	BMI 78$			;BEFORE A BLANK COMES Z
75$:	CPY I,11.
	BCS 80$			;IF GREATER THAN A
	CPY I,01
	BEQ 77$			;AFTER BLANK COMES A
	LDY I,0			;BEFORE A COMES A BLANK
	BEQ 85$

77$:	LDY I,11.		;A
	BNE 85$			;ALWAYS

78$:	LDY I,36.		;MAKE IT A Z
80$:	CPY I,37.
	BCC 85$			;LESS THAN Z
	LDY I,0
85$:	STY X,INITL
90$:	LDA I,0			;MUST BE POSITIVE ON RETURN
	RTS

	.SBTTL SHIELD-SHIELDS BUTTON HANDLER
SHIELD:	LSR SHDON		;ASSUME SHIELDS OFF
	LDA NPLAYR
	BEQ 90$			;ATTRACT
	LDA SHPPIX
	BMI 90$			;EXPLODING
	BEQ 90$			;NOT VISIBLE
	LDA SHLDS
	BEQ 90$			;NO SHIELD POWER LEFT
	ASL HYPSW
	ROR SHDON		;INDICATE SWITCH SETTING
	BPL 90$			;SHIELDS NOT ON
	SND SNDPON,S		;SHIELDS
	.IF NE, $DAST
	LDA FRAME
	AND #3
	BNE 90$
	.ENDC
	DEC SHLDS		;TAKE SHIELD POWER EVERY 4 FRAMES
90$:
RTS.0:	RTS

	.SBTTL SHIELD PIX
	.GLOBL SHLDVC
; SHLDPX DRAWS AN OCTAGON AROUND THE SHIP AT INTENSITY 'SHLDS' IF THE
; SHIELD BUTTON IS ON AND SHIELDS ARE AVAILABLE. THIS ROUTINE ASSUMES
; THE BEAM IS POSITIONED AT THE POINT WHERE THE SHIP IS TO BE DISPLAYED
; AND A NET BEAM POSITION CHANGE OF 0 IS IMPOSED.
;
; USES ROUTINES: CPYVEC,VGADD,AYTOR0 WHICH RESULTS IN
; A,X,Y,R0,R1,R2,TEMP1,TEMP1+1 BEING DESTROYED AND (VGLIST,VGLIST+1) IS
; UPDATED TO REFLECT ANY ADDITIONS TO THE VECTOR LIST

SHLDPX:	BIT SHDON		;SHIELDS UP?
	BPL RTS.0		;NO. JUST EXIT
	LDA SHLDS
	AND #0F0
	CMP #60
	BCS 1$
	LDA #60			;SET A MINIMUM
1$:	PHA			;SAVE INTENSITY
	LXL SHLDVC
	LAH SHLDVC
	STX R0			;SET (R0,R1) TO POINT TO SHIELD VECTOR LIST
	STA R1
	LDX #0
	STX TEMP1		;NO INVERSIONS
	STX TEMP1+1
	STX R2
	JSR CPYVEC		;DRAW INVISIBLE LINE TO CORNER OF OCTAGON
	LDX #7			;8 LINES IN OCTAGON
	PLA			;AT 'A' INTENSITY
	STA TEMP1		;FOOL CPYVEC INTO PUTTING INTENSITY
	JSR AYTOR0		;ADD Y+1 TO R0,R1,MOVE VECTORS, UPDATE VGLIST
	LDA #0
	STA TEMP1		;RESET INTENSITY
;	TAX			;(X STILL '-' FROM ABOVE)
	JMP AYTOR0		;ADD Y+1 TO R0,R1,MOVE VECTORS,UPDATE VGLIST,EXIT
	
	
	.SBTTL INIT-INITIALIZATION
	.CSECT CASTST
	.GLOBL INISOU
INIT:
1$:	BIT HALT		;WAIT FOR VG TO STOP BEFORE MONKEYING AROUND
	BMI 1$			;     WITH FRAME
	JSR SETROL		;SET UP ASTEROID SUBROUTINES. (CLEARS FRAME)
	LDA #0B0		;PUT A HALT INSTRUCTION FIRST
	STA VECRAM+3
	LDA I,0
	LDX I,03
30$:	STA X,SCORE-1		;CLEAR SCORE
	STA X,SCORE+2
	DEX
	BNE 30$			
31$:	STA X,200		;CLEAR WHOLE PAGE
	INX
	BNE 31$
	STA HSSND		;TURN OFF DEATH STAR SOUND
	LDA #1
	JSR SSBTLT		;DON'T WAIT
	LDA #98			;ENOUGH FOR 3 LARGE SAUCERS
	STA SEDLAY
	STA EDELAY		;DELAY ENTRY OF SAUCER
	LDA #7F
	STA RDELAY		;DELAY FOR STARTING ROCKS
	LDA #6			;IF MORE ROCKS THAN THIS THEN DON'T
	STA DIFCTY		;LAUNCH SAUCER
	LDA #-1
	STA UPDFLG		;NOT UPDATING INITIALS
	STA UPDFLG+1
	LDA #30
	STA THUMP3		;RESET STARTING THUMP SOUND
SINIT::	JSR PKYTST		;INIT ROCK VELOCITIES
	LDA OPTN1		;GET BONUS LEVEL
	AND #3
	TAY
	LDA Y,BONUS		;GET BOUNUS PLATEAU
	STA BONSCR+1
	STA PLATEU+1		;LSB
	STA PLATEU+4
	BMI 32$			;NO BONUS
	LDA #1
32$:	STA PLATEU+2
	STA BONSCR+2
	STA PLATEU+5
	LDA #3
	AND OPTN3		;GET LIFE COUNT
	TAX
	INX			;+2
	INX
	CPY #3			;BONUS ENABLED?
	BNE 2$			;YES.
	INX			;NO. GIVE 'EM ANOTHER LIFE
2$:	LDA $CMODE
	AND #3
	CMP #3			;2 COINS/CREDIT?
	BNE 1$			;NO
	INX			;GIVE 'EM 1 MORE
1$:	STX NHITS
	JMP INISOU		;SET UP POKEY
	
BONUS:	.BYTE 0,20,50,-1
	.ASECT

SRESET:	LDA #6
	STA DIFCTY
	LDX #0
	TXA
1$:	STA X,200		;SOFT RESET
	STA X,300
	INX
	BNE 1$
	RTS
	
	.SBTTL INITAL-DISPLAY AN INITIAL ON THE SCREEN
;INITIAL-DISPLAY INITIAL ON SCREEN
;ENTRY	(Y)=INDEX INTO INITL TABLE
	.GLOBL UNDERL,VGCHAR
INITAL:	LDA Y,INITL		;INITIAL
	ASL			;INDEX INTO VGMSGA TABLE
	TAY
	BNE 1$			;IF NOT A BLANK
	LDA UPDFLG
	AND UPDFLG+1
	BMI 1$			;NOT UPDATING INITIALS
	LXL UNDERL
	LAH UNDERL
	JMP VGJSRL		;INSERT JSRL TO UNDERLINE

1$:	JMP VGCHAR		;DISPLAY CHARACTER AND EXIT
	.PAGE
	.CSECT CASTST
	.SBTTL LIVES - DRAW A SHIP FOR EACH LIFE YOU HAVE LEFT
;LIVES - DRAW A SHIP FOR EACH LIFE YOU HAVE LEFT
;
;ENTRY	(A)=X POSITION FOR START OF PICTURES
;	(Y)=NUMBER OF LIFES
LIVES:	LDX I,852./4		;Y POSITION FOR PICTURES
LIVESS::STY TEMP1
	LDY I,0E0		;1/4 SIZE PICTURE
	STY VGSIZE
	JSR VGSABS		;POSITION BEAM AND RESET SCALE FACTOR
	LDA #70
	JSR VGWAIT
	JMP 11$
10$:	LXH SHIP17		;LSB OF SHIP PICTURE ROUTINE
	LAL SHIP17
	JSR VGADD2		;JSRL TO PICTURE
11$:	DEC TEMP1
	BEQ 99$			;DONE
	BPL 10$			;CONTINUE
99$:	RTS
	.ASECT


	.SBTTL MOTION - MOTION UPDATE ROUTINE
	.GLOBL ATTACK5
	.IF NE,$DTHST
	.GLOBL CLRSF
	.ENDC
;MOTION-MOTION UPDATE ROUTINE
;
;THIS ROUTINE ALSO UPDATES THE EXPLOSION INDEX TO SEQUENCE
;THRU THE PICTURES.
MOTION:	LDX PLAYR3		;PLAYSR # *3
	LDA X,SCORE+2
	AND #0F			;ISOLATE LOW 4 BITS
	STA BINSCR		;SAVE 'EM
	EOR X,SCORE+2		;ISOLATE HI 4 BITS
	LSR			;HIGH NIBBLE * 8
	STA R0
	LSR
	LSR			;HI NIBBLE *2
	ADC R0			;+ HI NIBB*8 = HI NIBB * 10
	ADC BINSCR		;+ LOW NIBBLE

	CMP #0F			;MAX IT OUT
	BCC 2$			;OK
1$:	LDA #0F
2$:	STA BINSCR		;KEEP BINARY SCORE LIMITED
MOV:	LDX #NOBJ+7
	LDA #0
	STA R9			;OBJECT COUNTER
10$:	LDA X,OBJ
	BNE 12$			;ACTIVE OBJECT
13$:	DEX
	BPL 10$			;MORE OBJECTS
	RTS
	
12$:	BPL 14$			;IF OBJECT ACTIVE
	JSR COMP		;TIME REMAINING (0 TO 60)
	LSR
	LSR
	LSR
	LSR
	CPX I,NOBJ
	BNE 16$			;NOT THE SHIP
	LDA FRAME
	AND I,01		;ADD 1 EVERYOTHER FRAME
	LSR
	BEQ 42$			;ALWAYS

16$:	SEC			;1+ VALUE /16
42$:	ADC X,OBJ		;NEW EXPLOSION PICTURE
	BMI 11$			;STILL INACTIVE
	CPX I,NOBJ
	BEQ 18$			;IF THE SHIP
	BCS 40$			;IF THE SAUCER
	DEC NROCKS
	BNE 17$			;IF MORE ROCKS REMAIN
	LDY I,7F		;DELAY BEFORE STARTING
	STY RDELAY
17$:	LDA I,0
	STA X,OBJ		;RESET PICTURE
	BEQ 13$
	
18$:	JSR NEWSHP		;RESET SHIP
	JMP 17$

40$:	LDA SEDLAY
	STA EDELAY		;DELAY BEFORE REENTERING
	BNE 17$			;ALWAYS
	
11$:	STA X,OBJ
	AND I,0F0		;A0 TO 0F0
	CLC
	ADC I,10		;B0 TO 0
	CPX I,NOBJ
	BNE 41$			;NOT THE SHIP
	LDA I,0F0		;SCALING FOR SHIP EXPLOSION
41$:	TAY
	LDA X,OBJXL
	STA XCOMP
	LDA X,OBJXH
	STA XCOMP+1
	LDA X,OBJYL
	STA XCOMP+2
	LDA X,OBJYH
	STA XCOMP+3
	JMP 30$
	
14$:	
	.IF NE, $DAST
	STA TEMP4		;SAVE OBJ CODE FOR ATTACK
	ASL TEMP4		;SPECIAL?
	BPL 1$			;NO
	CPX #NOBJ		;ROCK?
	BCS 1$			;NO
	AND #3C
	LSR
	LSR
	TAY
	STY TEMP4+1		;SAVE INDEX
	LDA Y,SRTIME		;GET CONTROL BYTE OF SPECIAL ROCK
	STA TEMP4+2		;SAVE DATA
	BMI 1$			;NOT ATTACKING
	.ENDC
	JSR ATTACK		;ATTACK

1$:	LDY #0
	CLC
	LDA X,XINC
	BPL 15$			;SIGN EXTENSION
	DEY
15$:	ADC X,OBJXL
	STA X,OBJXL
	STA XCOMP
	TYA
	ADC X,OBJXH
	CMP I,20
	BCC 19$			;IF 0 TO 1023
	.IF NE, $DAST
	CPX I,NOBJ+1
	BNE 35$			;NOT THE SAUCER
	JSR RSAUCR		;RESET SAUCER VALUES
28$:	JMP 13$			;ALWAYS

35$:	BIT TEMP4		;SPECIAL ROCK?
	BPL 33$			;NOPE
	LDY TEMP4+2		;WAITING?
	BMI 33$			;YEP.
	CPY #4			;TIMED OUT?
	BCS 33$			;NOPE. CONTINUE
	DEC NROCKS		;ZAP THE OBJECT
	DEC SPROCK
	LDY TEMP4+1
	LDA #0
	STA X,OBJ
	STA Y,SRTIME
	BEQ 28$			;(ALWAYS)

	.IFF
23$:	CPX #NOBJ		;SHIP/ENEMY?
	BEQ 33$			;SHIP
	CPX #NOBJ+1
	BEQ 34$			;SF
	BCS 33$			;TORPEDO
	TAY			;ENEMY,SAVE A
	LDA X,OBJ
	ASL			;WAITING?
	AND #0F0
	BCS 27$			;BLOWING UP
	BMI 35$			;WAITING
	BNE 27$			;CHASING
36$:	STA X,OBJ		;TURN OFF OBJECT
	DEC NROCKS		;DON'T COUNT IT ANYMORE
	JMP 13$			;CONTINUE
	
27$:	TYA			;RESTORE A
	.IFTF
33$:	AND #1F
	.IFF
	TAY
35$:	TYA			;RESTORE A
	.ENDC

19$:	STA X,OBJXH
	AND #7F
	STA XCOMP+1
	CLC
	LDY I,0
2$:	LDA X,YINC
	BPL 20$			;SIGN EXTENSION
	DEY
20$:	ADC X,OBJYL
	STA X,OBJYL
	STA XCOMP+2
	TYA
	ADC X,OBJYH		;0 TO 767 PLEASE
	CMP I,18
	BCC 25$			;ALREADY 0 TO 767
	BEQ 24$			;IF 768 UP
	LDA I,17
	BNE 25$

24$:	LDA I,0
25$:	STA X,OBJYH
	STA XCOMP+3
	.IF NE, $DTHST
	LDA SIZOPT+2
	CPX #NOBJ+1
	BCC 50$
	.ENDC
	LDA X,OBJ
	AND #3
	TAY
	LDA Y,SIZOPT		;GET SIZE OPTION
50$:	TAY
30$:	JSR PICTUR		;DISPLAY PICTURE
32$:	JMP 13$
	.IF NE,$DTHST
	
34$:	CMP #21			;21XX?
	BEQ 37$
	CMP #0FE		;FEXX?
	BNE 19$
37$:	JSR RSAUCR		;ZAP SAUCER
	JSR CLRSF		;TAKE OTHER OBJECTS
	JMP 13$
	.ENDC
	
SIZOPT:	.BYTE 0,0E0,0F0,0E0
	
RSAUCR:	LDA SEDLAY
	STA EDELAY		;DELAY BEFORE RESTARTING
	TYA		;SAVE Y,X
	PHA
	SND SNDOFF,LS		;TURN OFF SOUND
	PLA
	TAY
SRSAUC:	LDA I,0
	STA SAUPIX		;CLEAR SAUCER
	STA SAUXI
	STA SAUYI
	STA SAUXH		;BE SURE X POSITION IS 0
	STA SAUXL
RTS.3:	RTS
	.SBTTL MOVE-MOVE SHIP
	.GLOBL MULT
;MOVE-MOVE SHIP
;
MOVE:	LDA NPLAYR
	BEQ RTS.3		;IN ATTRACT MODE
	LDA SHPPIX
	BMI RTS.3		;IF EXPLODING
	BNE 5$			;SHIP VISIBLE
	.IF NE, $DTHST
	LDA SFWAVE		;GET WAVE COUNT
	CMP #10.		;FIRST FEW?
	BCS 1$			;YEP. GIVE 'EM A BREAK
	LDA SAUPIX
	BNE RTS.3		;NOT WHILE SF IS UP
	.ENDC
1$:	DEC SDELAY		;DECREMENT COUNT
	BNE RTS.3		;NOT DONE YET
	JSR NEARBY		;CHECK FOR AREA FREE OF ROCKS
	BNE RTS.3		;IF SOMETHING CLOSE BY
92$:	LDX I,01
	STX SHPPIX		;USE 1/4 SIZE PICTURE
	STX SBTL		;APPROX 0=> SHIP BACK TO LIFE FLAG
	SND SNDON,BL,JMP	;START BACK TO LIFE SOUND
	
5$:	LDA A,ROTL
	BPL 10$			;NO ROTATE LEFT
	LDA I,03
	BNE 15$			;ALWAYS
	
10$:	LDA A,ROTR
	BPL 20$			;NO ROTATE RIGHT
	LDA I,-3
15$:	CLC
	ADC ANGLE
	STA ANGLE		;NEW ROTATION ANGLE
20$:	LDA FRAME
	LSR
	BCS RTS.3		;EVERY OTHER FRAME CHECK THRUST
MOVE1:	LDA A,THRUST
	BPL 80$			;NO THRUST
	LDA #40
	STA R2			;SIGNAL TO USE COS
	LDA SHPXI		;GET VEL X
	JSR CACCEL		;COMPUTE ACCELERATION
	ADC XINCL		;COMPUTE NEW VEL
	TAX
	LDA R1
	ADC SHPXI
	JSR MOVE2		;RANGE IT
	STA SHPXI
	STX XINCL
	LDA #0
	STA R2
	LDA SHPYI		;GET VEL Y
	JSR CACCEL		;COMPUTE ACCEL
	ADC YINCL		;COMPUTE NEW VEL
	TAX
	LDA R1
	ADC SHPYI
	JSR MOVE2		;RANGE IT
	STA SHPYI
	STX YINCL
	RTS

80$:	LDA I,0
	TAX			;LDX #0
	SEC	
	SBC SHPXI		;A 0-SHPXI
	ASL			;*4
	ASL
	BCC 86$			;+
	DEX			;SIGN EXTEND
	CLC
86$:	ADC XINCL
	STA XINCL
	TXA
	ADC SHPXI
	STA SHPXI
	LDA #0	
	TAX			;LDX #0
	SEC
	SBC SHPYI		;A=0-SHPYI
	ASL			;*4
	ASL	
	BCC 88$			;+
	DEX			;SIGN EXTENDED
	CLC
88$:	ADC YINCL
	STA YINCL
	TXA
	ADC SHPYI
	STA SHPYI
89$:	RTS

CACCEL:	BPL 1$	
	JSR COMP		;GET ABS(VEL) (0-3F)
1$:	LSR			;RANGE IT 0-7
	LSR
	LSR
	TAX
	LDA X,ACCEL		;GET ACCEL MULTIPLIER
	BIT SHDON		;SHIELDS?
	BPL 2$			;NO
	LSR			;YES. USE 1/2
2$:	STA R1			;MULTIPLIER
	LDA ANGLE		;ANGLE
	CLC
	ADC R2
	
	JSR SIN			;SIN(ANGLE)
4$:	JSR MULT		;*R1
	LDY #0
	ASL			;*2
	BCC 5$
	DEY			;SIGN EXTENDED
5$:	ASL
	STY R1
	ROL R1
	CLC
	RTS
ACCEL:	.BYTE 80,70,60,50,40,30,20,10
CKSUM3:	.BYTE 0		;CHECKSUM 6800-6FFF
MOVE2:	BMI 30$			;IF OUT OF RANGE
	CMP I,40
	BCC 35$			;IF IN RANGE
	LDX I,0FF		;MAX
	LDA I,3F
	RTS

30$:	CMP I,0C1
	BCS 35$			;IF IN RANGE
	LDX I,01		;-3FFF=C001
	LDA I,0C1		;SET MAX NEGATIVE
35$:	RTS


	.SBTTL NEARBY - CHECK FOR ROCKS NEARBY
;NEARBY - CHECK FOR ROCKS NEAR SHIP
;
;EXIT	(CC)=0 IF AREA FREE OF ROCKS
;	(SDELAY)>0 IF ROCK NEAR SHIP
NEARBY:	LDA FRAME
	AND #3			;COUNT EVERY 4 FRAMES
	BNE 11$			;NOT TIME
	INC SBTLT		;COUNT
	BNE 11$			;NOT 16 SECONDS
	LDA #2			;FIND A SMALL OBJ
	STA R0
14$:	LDX #NOBJ-1
13$:	LDA X,OBJ
	ASL			;MAKE SURE ITS NOT A SPECIAL
	BMI 12$			;IT IS. SKIP IT
	AND R0
	BEQ 12$
	DEC NROCKS		;TAKE 1 FROM TOTAL
	LDA #0
	STA X,OBJ		;ZAP ROCK
	BEQ 11$			;(ALWAYS)

12$:	DEX			;COUNT DOWN
	BPL 13$			;CONTINUE
	ASL R0			;LOOK FOR NEXT SIZE OBJ
	BPL 14$

11$:	LDX #NOBJ-1
10$:	LDA X,OBJ
	BEQ 40$			;OBJECT NOT ALIVE
	LDA X,OBJXH
	SEC
	SBC SHPXH
	CMP I,5
	BCC 20$			;IF CLOSE ENOUGH
	CMP I,-5
	BCC 40$			;TOO FAR AWAY
20$:	LDA X,OBJYH
	SEC
	SBC SHPYH
	CMP I,5
	BCC 50$			;TOO CLOSE
	CMP I,-5
	BCS 50$			;TOO CLOSE
40$:	DEX
	BPL 10$			;LOOP THRU ALL OBJECTS
	INX			;ZERO FLAG ON EXIT
	RTS

50$:	INC SDELAY		;DELAY BEFORE ENTERING SHIP
RTS.1:	RTS			;SETS NON-ZERO FLAG
	
	

	.SBTTL NEWAST - START UP NEW ASTEROIDS
	.IF NE,$DAST
	.GLOBL SETROL
	.ENDC
;NEWAST-START NEW ASTEROIDS
;
NEWAST:	LDX I,NOBJ-1
	LDA RDELAY
	BEQ 66$
	JMP 65$
	.IF NE, $DTHST
	JSR CLRSF		;TAKE AWAY SNOWFLAKE
	STA SFACT		;DROP SNOWFLAKE
	.ENDC
66$:	LDA NPLAYR		;ATTRACT MODE?
	BEQ 11$			;YES.
	LDA SHPPIX
	BEQ RTS.1		;NOT WHILE SHIP IS INVISIBLE
	BMI RTS.1		;OR BLOWING UP
11$:	LDA SAUPIX		;SAUCER?
	BNE RTS.1		;YES. NO NEW ROCK
	
;	LDA #0
	.IF NE, $DTHST
	STA SFDIS
	LDX SFORDR
	CPX #63.
	BCS 12$
	BIT SFODIS
	BMI 12$
	INC SFORDR
	CPX #9
	BCC 13$
	LDX #9
13$:	LDY X,RFDSFT
	STY SFODIS
	LDY X,RSFTB
12$:	LDA #-1
	STA SFACT		;ACTIVATE SNOWFLAKE
	JSR LSF			;LAUNCH IT
	LDA #0F
	STA EDELAY		;DELAY BEFORE RELEASE
14$:
	LDX SFWAVE		;COUNT SF WAVE
	INX
	CPX #64.		;TO A MAXIMUM
	BCS 15$
	STX SFWAVE
15$:	JMP SETTIP		;SET UP SNOWFLAKE
	
	.IFF
	STA SPROCK		;MAKE SURE THERE ARE NO SPECIALS
	LDX PLAYR		;POINT TO PLAYER
	STA X,TRILE		;ENABLE DIAMOND LAUNCH
	LDX #NSPCLS-1
20$:	STA X,SRTIME
	DEX
	BPL 20$
	LDX SROCKS
	CPX #63.
	BCC 14$
	LDA NPLAYR
	BNE 15$
	JSR SRESET
14$:	INC SROCKS
15$:	CPX #3
	BCC 21$
	LDX #3
21$:	LDY X,RWAVE
	.ENDC
5$:	STY NROCKS		;ACTIVATE ROCKS
	STY TEMP1		;KEEP A COPY
	LDX #NOBJ-1
	LDA DIFCTY
	CMP #10.		;MINIMUM # OF ROCKS BEFORE MR. BILL
	BCS 2$
	INC DIFCTY
2$:	LDY #NOBJ+1		;POINT TO SAUCER VELOCITY
10$:	JSR RNDPOS		;GET A RANDOM POSITION
	DEX
	DEC TEMP1
	BNE 10$			;LOOP FOR EACH NEW ROCK
	LDA I,7F
	STA EDELAY		;SAUCER SHOULD WAIT
	LDA I,30
	STA THUMP3		;RESET THUMP SOUND
65$:	LDA I,0
70$:	STA X,OBJ		;CLEAR REST OF OBJECTS
	DEX
	BPL 70$			;ASSUMES SROCKS < NOBJ
	RTS

	.IF NE, $DTHST
RSFTB:	.BYTE 5,7,0,9,0,11.,0,0,11.,0
RFDSFT:	.BYTE 0,0,80,0,0,0,0,0,0,0
	.IFF
RWAVE:	.BYTE 6,7,8,9
	.ENDC
	.GLOBL RNDPOS
RNDPOS:	LDA RANDOM		;RANDOM NUMBER
	AND I,38		;PICTURE NUMBER
	ORA I,04		;SIZE OF OBJECT
	STA X,OBJ		;SET PICTURE
	JSR NEWVEL		;GET NEW VELOCITY
	LDA RANDOM		;RANDOM NUMBER
	LSR
	AND I,1F
	BCC 50$			;START ON X ARIS
	CMP I,18		;START ON Y AXIS
	BCC 35$			;IF 0 TO 767
	AND I,17		;384 TO 512
35$:	STA X,OBJYH
	LDA I,0
	STA X,OBJXH
	STA X,OBJXL
	BEQ 60$			;ALWAYS
	
50$:	STA X,OBJXH
	LDA I,0
	STA X,OBJYH
	STA X,OBJYL
60$:	RTS
	
	
;NEWSHP-POSITION SHIP FOR START
;
NEWSHP:	LDA I,60
	STA A,SHPXL		;POSITION IN MIDDLE - JUST OFF CENTER
	STA A,SHPYL
	LDA I,0
	STA SHPXI		;WITH NO VELOCITY
	STA SHPYI
	LDA I,10
	STA A,SHPXH
	LDA I,0C
	STA A,SHPYH
	LDA #-1
	STA SHLDS		;GIVE 'EM FULL SHIELDS
	RTS


	.SBTTL NEWVEL - NEW RANDOM VELOCITY USING OLD
;NEWVEL - NEW RANDOM VELOCITY FOR NEW VELOCITY
;
;ENTRY	(X)=INDEX FOR NEW VELOCITY
;	(Y)=INDEX OF OLD VELOCITY
;
NEWVEL:	LDA RANDOM		;RANDOM NUMBER
	AND I,8F
	BPL 10$			;IF POSITIVE NUMBER 0 TO 15
	ORA I,0F0		;-1 TO -16
10$:	CLC
	ADC Y,XINC
	JSR NEWVE1		;CHECK RANGE OF VELOCITIES
	STA X,XINC
	LDA RANDOM		;RANDOM NUMBER
	AND I,8F
	BPL 40$			;POSITIVE NUMBER 0 TO 15
	ORA I,0F0		;NEGATIVE -1 TO -16
40$:	CLC
	ADC Y,YINC
	JSR NEWVE1		;CHECK RANGE OF VELOCITY
	STA X,YINC
	RTS

NEWVE1:	BPL 20$			;POSITIVE RESULT
	CMP I,-1F
	BCS 15$			;WITHIN RANGE
	LDA I,-1F
15$:	CMP RVELM
	BCC 30$			;NOT TOO CLOSE TO ZERO
	LDA RVELM		;AT LEAST 1/2
	RTS

20$:	CMP RVELP
	BCS 25$			;NOT TOO CLOSE TO ZERO
	LDA RVELP
25$:	CMP I,20
	BCC 30$			;WITHIN RANGE
	LDA I,1F
30$:
RTS.2:	RTS
	
	.SBTTL PARAMS-DISPLAY PARAMETERS
	.GLOBL CPMGV,VGME
;PARAMS-DISPLAY PARAMETERS
;
PARAMS:	LDA NPLAYR		;ATTRACT?
	BEQ 12$			;YES,STANDARD SIZE CHAR AND NO COPYRIGHT
	LAL CPMGV
	LXH CPMGV
	JSR VGADD2
	LDY #0			;INIT FOR SMALL
	LDA PLAYR		;PLAYER UP?
	BNE 11$			;NO,GIVE 'EM SMALL
12$:	LDY #10
11$:	STY VGSIZE
	LDA I,100./4
	LDX I,876./4
	JSR VGSABS		;POSITION BEAM
	LDA I,70
	JSR VGWAIT		;WAIT FOR BEAM
	LDA NPLAYR
	CMP I,02
	BCC 10$			;IF ATTRACT OR NOT 2 PLAYER
	LDA PLAYR
	BNE 10$			;IF PLAYER 2 UP
	LDA SHPPIX
	BNE 10$			;IF HE HAS APPEARED
	LDA SDELAY
	BMI 10$			;HE HAS DIED
	LDA FRAME
	AND I,10
	BEQ 20$			;FLASH SCORE
10$:	LDA I,SCORE
	LDY I,03
	SEC
	JSR DIGITS		;DISPLAY PLAYER 1 SCORE
20$:	LDY HITS
	LDA #0			;PLAYER 1
	JSR GTSP		;GET SHIP PIX
	LDA #160./4
	JSR LIVES		;DISPLAY NUMBER OF LIFES
	LDA PLAYR		;PLAYER UP?
	BNE 22$			;NOPE
	LDA SHPPIX		;ALIVE?
	BMI 22$			;NO
	BEQ 22$			;NO
	JSR TWO			;GO TWINKLE OFF SCREEN
22$:	LDA #0			;SMALL
	STA VGSIZE
	ORA HSCORE+1
	ORA HSCORE+2		;HIGH SCORE?
	BEQ 21$			;NO. NEVER MIND WRITING IT
	LDA I,74
	LDX I,876./4
	JSR VGSABS		;POSITION BEAM
	LDA I,50		
	JSR VGWAIT		;WAIT FOR BEAM
	LDA I,HSCORE
	LDY I,03
	SEC
	JSR DIGITS		;DISPLAY HIGH SCORE
	LDY #0
	STY R3
	JSR VGCHAR		;BLANK
	JSR IN3TIM		;3 INITIALS
21$:	LDA NPLAYR		;ATTRACT?
	BEQ 23$			;YES, NO BONUS
	LDA BONSCR+2		;BONUS?
	BMI 23$			;NO BONUS MSG
	LDY #13.		;BONUS MESSAGE
	LDA #0			;ENGLISH ONLY
	JSR VGME
	LDA #PLATEU
	CLC
	ADC PLAYR3		;COMPUTE @
	LDY #3
	SEC
	JSR DIGITS
23$:	LDX #10			;MEDIUM SIZE
	LDA NPLAYR
	CMP #1
	BEQ RTS.5		;NO PLAYER 2
	BCC 24$			;ATTRACT. ALWAYS BIG
	LDA PLAYR		;PLAYER 2 UP?
	BNE 24$			;YES. GIVE 'EM BIG
	TAX			;SMALL
24$:	STX VGSIZE
	LDA I,768./4
	LDX I,876./4
	JSR VGSABS		;POSITION BEAM
	LDA I,50
	JSR VGWAIT		;WAIT FOR BEAM
	LDA NPLAYR		;ATTRACT?
	BEQ 30$			;YEP. ALWAYS DISPLAY
	LDA PLAYR
	BEQ 30$			;PLAYER NOT UP
	LDA SHPPIX
	BNE 30$			;IF HE HAS APPEARED
	LDA SDELAY
	BMI 30$			;HE HAS DIED
	LDA FRAME
	AND I,10
	BEQ 40$			;FLASH SCORE
30$:	LDA I,SCORE+3
	LDY I,03
	SEC			;ZERO SUPPRESS
	JSR DIGITS		;DISPLAY SCORE FOR PLAYER 2
40$:	LDY HITS+1
	LDA #1			;PLAYER 2
	JSR GTSP		;GET SHIP PIX
	LDA #828./4
	JSR LIVES		;DISPLAY NUMBER OF LIVES
	LDA PLAYR		;PLAYER 2 UP?
	BEQ RTS.5		;NOPE
	LDA SHPPIX		;ALIVE?
	BEQ RTS.5		;NOPE
	BMI RTS.5		;NOPE
	JMP TWO			;DO TWINKLE

;GET SHIP PICTURE
;AT ENTRY:
;(A)=0 FOR PLAYER 1, 1 FOR PLAYER 2
;(4)=# OF HITS FOR PLAYER
;
;AT EXIT:
;(Y)=# OF HITS-1 IF SHIP VISIBLE
;    ELSE # OF HITS
GTSP:	EOR PLAYR		;GET PLAYER
	BEQ 1$			;WANT 1, IS 1
	LDX SHPPIX+100		;WANT 2, IS 1
				;OR WANT 1, IS 2
	BMI 3$			;BLOWING UP
	BNE 2$			;VISIBLE
3$:	INY			;NOT VISIBLE
2$:	RTS
1$:	LDX SHPPIX		;WANT 1, IS 1
				;WANT 2, IS 2
	BEQ 3$			;NOT VISIBLE
	BMI 3$			;BLOWING UP
RTS.5:	RTS			;VISIBLE

;TWO TWINKLE OFF SCREEN
; AT ENTRY:
; NO CONDITIONS
;
; AT EXIT:
; A,X,Y,R0,R1,R2,TEMP1,TEMP1+1 USED

TWO:	LDA SBTL		;GET SHIP INTENSITY
	CMP #0C0		;AT MAX?
	BCC 1$			;NOPE. TWINKLE
	RTS			;YEP. JUST EXIT

1$:	PHA			;SAVE SBTL VALUE
	EOR #-1			;NEGATE IT
	ADC #0C1		;COMPUTE 0C0-SBTL
	STA SBTL		;PASS IT TO SHPPIC ROUTINE
	LDA ANGLE		;SAVE CURRENT ANGLE
	PHA
	LDA #40		;90 DEGREES
	STA ANGLE
	JSR SHPPIC		;DRAW A TWINKLE SHIP
	PLA			;RESTORE STUFF
	STA ANGLE
	PLA
	STA SBTL
	RTS			;DONE

	.SBTTL PICTUR-DISPLAY OBJECT PICTURE
;PICTUR-DISPLAY OBJECT PICTURE
;
;ENTRY (Y)=SCALING FACTOR TO BE USED
;	(XCOMP,XCOMP+3)=OBJECT POSITION
	.GLOBL ROCKSA,TRIPIX
	.IF NE,$DTHST
	.GLOBL SNOWF
	.ENDC
PICTUR:	STY VGSIZE		;SET SCALING FACTOR
	STX TEMP3		;SAVE X
	LSR XCOMP+1		;PUT VALUES INTO INTEGER FORMAT
	ROR XCOMP
	LSR XCOMP+1
	ROR XCOMP
	LSR XCOMP+1
	ROR XCOMP
	LSR XCOMP+3
	ROR XCOMP+2
	LSR XCOMP+3
	ROR XCOMP+2
	INC XCOMP+3		;ADD 128 (RANGE IS 127<Y<897)
	LSR XCOMP+3
	ROR XCOMP+2
	JSR POSBEM		;POSITION BEAM
	LDX TEMP3
	JSR 31$
	LDX TEMP3		;THE FOLLOWING CODE ALWAYS RETURNS HERE
	RTS

31$:	LDA X,OBJ
	BPL 35$			;IF NOT EXPLODING
	CPX I,NOBJ
	BEQ 33$			;IF THE SHIP
	AND I,0C
	LSR			;0, 2, 4 OR 6
	TAY
	LDA AY,EXPPIC
	LDX AY,EXPPIC+1
	BNE 78$			;ALWAYS
	
33$:	JMP SHPEXP		;EXPLODE SHIP

35$:	CPX I,NOBJ
	BEQ 50$			;IF THE SHIP
	CPX I,NOBJ+1
	BEQ 60$			;IF SAUCER
	BCS 70$			;IF A TORPEDO (DOT)
	.IF NE, $DAST
	ASL
	BPL 37$
	.IFTF
	JMP TRIPIX
	.IFT
37$:	LSR
	LSR
	LSR
	AND #6
	TAY
	LDA AY,ROCKSA
	LDX AY,ROCKSA+1
78$:	JMP VGADD2		;ADD JSRL OF PICTURE TO VECTOR LIST
	.ENDC
	
50$:	JSR SHLDPX		;DISPLAY THE SHIELD IF ENABLED
	JMP SHPPIC		;DISPLAY SHIP PICTURE

60$:
	.IF NE, $DAST
	LAL SAUCER
	LXH SAUCER
	BNE 78$			;ALWAYS
	.IFF
	JMP SNOWF
	.ENDC
	
70$:	LDA I,70
	LDX I,0F0
	JSR VGDOT		;PUT A DOT THERE
	LDX TEMP3
	LDA FRAME
	AND I,03
	BNE 75$			;EVERY FOURTH FRAME
	DEC X,OBJ		;DECREMENT ACTIVE COUNT
75$:	RTS


POSBEM:	LDX #XCOMP
	JSR VGLABS		;POSITION BEAM
	LDA #70			;WE WANT A WAIT OF 7
	SEC
	SBC VGSIZE		;BACK DOWN BY AMOUNT OF SCALE

28$:	CMP #0A0		;TOO BIG?
	BCC 30$			;NOPE. (0-90)
	PHA			;SAVE IT
	LDA #90
	JSR VGWAIT		;INSERT A WAIT
	PLA
	SEC
	SBC #10			;BACK DOWN AGAIN
	BNE 28$			; (ALWAYS)

30$:	JMP VGWAIT		;INSERT A WAIT AND EXIT
	.SBTTL POINTS-ADD POINTS TO SCORE
	.GLOBL POINTS,SND.EL
;POINTS-ADD POINTS TO SCORE
;
;ENTRY:
;A+CARRY=# TO ADD TO POINTS (/100)
;AT EXIT:
;SCORE(PLAYR)=SCORE(PLAYR)+A*1000+CARRY*10000
POINTS:	ROR
	ROR R0
	LSR
	ROR R0
	LSR
	ROR R0
	LSR
	ROR R0
	STA R1
	SED
	STX R2			;SAVE X
	LDX PLAYR3
	LDA R0
	AND #0F0		;LOW DIGIT ALWAY=0
	CLC
	ADC X,SCORE
	STA X,SCORE
	LDA R1
	ADC X,SCORE+1
	STA X,SCORE+1
	LDA #0
	ADC X,SCORE+2
	STA X,SCORE+2
	CMP X,PLATEU+2		;HIT THE NEXT PLATEAU?
	BCC 19$			;NOPE. NEVER MIND
	BNE 10$			;YEP.
	LDA X,SCORE+1		;CHECK NEXT BYTE DOWN
	CMP X,PLATEU+1
	BCC 19$			;OK
10$:	CLC			;HIT LIMIT
	LDA BONSCR+1		;SO UP IT A NOTCH
	ADC X,PLATEU+1
	STA X,PLATEU+1
	LDA BONSCR+2
	ADC X,PLATEU+2
	STA X,PLATEU+2
	LDX PLAYR
	LDA X,HITS
	CMP #10.		;NO MORE THAN 10 LIVES
	BCS 19$
	INC X,HITS		;GIVE 'EM ANOTHER LIFE
	INC SND3		;SIGNAL THAT WE MUST MAKE NOISE
19$:	CLD
	LDX R2			;RESTORE X
	RTS


	.SBTTL SBANK - SET BANK SELECT
;SBANK - SET BANK SELECT
;
;ENTRY	(PLAYR)=PLAYER NUMBER
;EXIT	(CC)=POSITIVE ON RETURN

SBANK:	LDA PLAYR		;0 OR 1
	LSR
	ROR			;0 OR 80
	STA BNKSEL
	RTS
	
	
	.SBTTL SCORES-DISPLAY HIGH SCORE TABLE
;SCORES-DISPLAY HIGH SCORE TABLE
;
;(CC)=CARRY SET IF DISPLAYING TABLE
	.GLOBL CPYRS
SCORES:	LDX NPLAYR	
	BNE 40$			;NOT ATTRACT MODE
	LDA FRAME+1
	AND I,04
	BEQ 30$			;DISPLAY SCORES
90$:	STX VGSIZE
	LDA #70
	LDX #68
	JSR VGSABS		;POSITION BEAM
	LDA #70
	JSR VGWAIT		;WAIT
	JSR CPYRS		;PUT UP COPY RIGHT
	LDY #7
	JSR VGMSG		;GAME OVER
40$:	CLC
	RTS
	
30$:	LDA HSCORE
	ORA HSCORE+1
	ORA HSCORE+2
	BEQ 90$			;IF NO HIGH SCORES
	LDY I,0
	JSR VGMSG		;DISPLAY "HIGH SCORE" MESSAGE
	LDX #0
	STX R0			;ITEM COUNTR (COUNTS BY 1 IN BCD)
	STX R3			;ITEM COUNTER (COUNTS BY 3 IN BINARY)
	LDA #668./4
	STA R2			;Y VALUE FOR FIRST LINE OF DISPLAY
	LDX #HSCORE
20$:	LDA #10
	STA VGSIZE		;CHARACTER SIZE
	STX R1			;SCORE INDEX
	LDA X,0			;ANY SCORE?
	ORA X,1
	ORA X,2
	BEQ 80$			;A 0 ENDS THE SEARCH
	LDA #380./4		;VALUE OF X FOR LINE
	LDX R2			;GET Y
	JSR VGSABS		;POSITION BEAM
	LDA #40
	JSR VGWAIT		;WAIT FOR IT
	LDA R0			;UPDATE BCD ITEM COUNTER
	SED
	CLC
	ADC #1
	CLD
	STA R0
	LDA #R0			;GET ADDRESS OF ITEM COUNTER
	SEC			;SUPPRESS LEADING ZERO'S
	LDY #1			;ONLY 2 DIGITS (1 BYTE)
	JSR DIGITS
	LDA #40
	TAX
	JSR VGDOT		;PRINT A PERIOD AFTER NUMBER
	LDY #0
	JSR VGCHAR		;PRINT A SPACE AFTER THAT
	LDA R1			;'A' = ADDRESS OF 3 BYTE SCORE
	LDY #3			;6 DIGITS (3 BYTES)
	SEC			;SUPPRESS LEADING ZEROES
	JSR DIGITS
	LDY #0
	JSR VGCHAR		;FOLLOW WITH A BLANK
	JSR IN3TIM		;DISPLAY 3 INITIALS
	LDA R0
	CMP #4			;ONE OF FIRST 3?
	BCS 21$			;NO
	LDA R2			;PUT IN JSRL TO SHIP
	ADC #2
	TAX			;Y POSITION
	LDA #0B2		;X POSITION
	LDY #2			;# OF LIVES
	JSR LIVESS
21$:	LDA R2			;GET 'Y' POSITION
	SEC			;BACK DOWN
	SBC #32./4		;COMPUTE Y OF NEXT LINE
	STA R2
	LDX R1			;GET SCORE INDEX
	INX			;+3
	INX
	INX
	CPX #3*10.+HSCORE	;END?
	BCC 20$			;NOPE
80$:	SEC			;YEP. SIGNAL SCORES ARE UP
	RTS

IN3TIM:	JSR 1$
	JSR 1$
1$:	LDY R3			;Y = INITIAL INDEX
	JSR INITAL		;DISPLAY INITIAL
	INC R3			;BUMP POINTER
	RTS

	.SBTTL SEARCH - SEARCH FOR FREE ROCK ENTRY
	.GLOBL SEARCH,SEARC1
;SEARCH - SEARCH FOR FREE ROCK ENTRY
;
;EXIT	(CC)=POSITIVE IF ENTRY EXISTS
;	(X)=FREE ENTRY INDEX IF POSSIBLE
;
SEARCH:	LDX I,NOBJ-1
SEARC1:	LDA X,OBJ
	BEQ 20$			;FOUND ONE
	DEX
	BPL SEARC1		;LOOP TIL EXHAUSTED
20$:	RTS
	
	
	.SBTTL SHPEXP-SHIP EXPLODING PICTURES
;SHPEXP-SHP EXPLODING PICTURES
;
	.GLOBL TFPIX
SHPEXP:	LDA SHPPIX
	CMP I,0A2
	BCS 10$			;NOT THE FIRST EXPLOSION

	LDX #7			;# OF VECTORS IN SHIP PICTURE
5$:	LDA RANDOM
	AND #7
	EOR XCOMP		;APPLY IT TO THE POSITION
	ASL			;SCALE IT
	STA X,SXPXL		;X LSB
	LDA XCOMP+1
	ROL
	STA X,SXPXH		;X MSB
	LDA RANDOM
	AND #7
	EOR XCOMP+2		;ADD IT TO POSITION
	ASL			;SCALE IT
	STA X,SXPYL		;Y LSB
	LDA XCOMP+3
	ROL
	STA X,SXPYH		;Y MSB
	LDA RANDOM
	AND #15.
	ADC #-8
	STA X,EXPTMB
	JSR 150$
	STA X,EXPDX		;X VEL
	JSR 150$
	STA X,EXPDY		;Y VELOCITY
	DEX
	BPL 5$			;CONTINUE

10$:	LDA #7
	STA R2			;NO X/Y FLIP REQUIRED
	STA R5			;LOOP COUNT

20$:	LDX R5			;VECTOR COUNTER
	LDA SHPPIX		;GET SHIP PICTURE (A0-FF)
	JSR COMP		;A = 60 - 0 IN INCREMENTS OF 1
	AND #0F0		;60 - 0 IN INCREMENTS OF 10
;	CLC
	ADC #60			;CO - 60
	STA TEMP1		;INTENSITY
	LDA X,EXPANG		;ORIENTATION
	ADC X,EXPTMB		;UPDATE IT
	STA X,EXPANG
	LSR			;GET CODE
	LSR
	PHA			;SAVE IT FOR LATER
	LSR			;PUT IT IN BIT 2
	LSR
	LSR
	AND #4			;ISOLATE BIT 2
	STA TEMP1+1		;Y INVERSION BIT
	ORA TEMP1		;MERGE IT WITH INTENSITY
	STA TEMP1		;PASS IT
	JSR 100$		;COMPUTE X
	STA XCOMP+1		;MOVE DATA BACK TO X SLOT
	LDA XCOMP+2
	STA XCOMP
	TXA
	CLC
	ADC #8			;SKIP UP TO Y PARAMETERS
	TAX
	JSR 100$		;COMPUTE THEM
	JSR POSBEM		;POSITION BEAM
	PLA			;GET ORIENTATION
	AND #1E			;ISOLATE PIX CODE
	TAX
	LDA X,TFPIX+64.		;POINT TO FRAME ROUTINE
	ASL			; ITS A JSRL SO WE MUST UNPACK IT
	STA R0			;  AND PUT THE ACTUAL ADDRESS INTO R0,R1
	LDA X,TFPIX+65.
	ROL
	EOR #0C0		;DROP BIT 15 AND SET BIT 14
	STA R1
	LDX #0
	JSR CPYVEC		;MOVE IN 1 VECTOR
	DEC R5			;COUNT DOWN
	BPL 20$			;CONTINUE
	RTS			;EXIT

100$:	LDY #0
	LDA X,EXPDX		;GET DIRECTION
	BPL 101$
	DEY			;SIGN EXTEND
101$:	CLC
	ADC X,SXPXL		;UPDATE POSITION
	STA X,SXPXL
	STA XCOMP+2		;PASS IT TO VGLABS ROUTINE HERE
	TYA
	ADC X,SXPXH
	AND #7			;ROLL OVER TOP AND SIDES
	STA X,SXPXH
	LSR
	STA XCOMP+3
	ROR XCOMP+2
	RTS

150$:	LDA RANDOM
	AND #7		;MASK TO 3 BITS
	CLC
	ADC #-4		;MAKE IT RANGE -4 < N < +3
	ADC #0		;MAKE IT RANGE -4 < N < +4
	RTS
	
	.SBTTL SHPPIC-DISPLAY SHIP PICTURE
;SHPPIC-DISPLAY SHIP PICTURE
;
; ENTRY:
; (VGLIST,VGLIST+1) = PLACE IN VG RAM TO DEPOSIT VECTOR INSTRUCTIONS
;EXIT	(VGLIST,VGLIST+1)=UPDATED VECTOR LIST POINTER
;USES	A,X,Y,(R0,R1),R2,R3,R4
	.GLOBL SHIPSV,SHPVCT

	.GLOBL EXP16
SHPPIC:	LDA SBTL
	CMP #0C0		;TWINKLE ON THE SCREEN?
	BCS 1$			;NOPE
	ADC #6			;YEP. TWINKLE
	STA SBTL
	LDA RANDOM		;RANDOM NUMBER
	AND #4			;GET RANDOM INVERSION BITS
	STA TEMP1
	LDA RANDOM		;RANDOM NUMBER
	AND #4
	STA TEMP1+1
	LDA RANDOM		;RANDOM NUMBER
	AND #80
	STA R2
	LDA #9			;10 PAIRS OF VECTORS
	STA R5
	LAH EXP16-1
	LXL EXP16-1
	STA R1			;INIT R0,R1
	STX R0
	LDY #0			;0=> Y
	LDX #0

2$:	JSR AYTOR0		;COMPUTE R0,R1 = Y+1, COPY 1 VECTOR
	LDA RANDOM		;RANDOM NUMBER
	LSR			;PUT IT IN CARRY
	LDA #0
	BCC 4$			;SHOW A DOT
	LDA #70			;BLANK A DOT
4$:	ORA TEMP1		;MERGE WITH INVERSION BIT
	STA TEMP1
	JSR AYTOR0		;COMPUTE R0,R1 = Y+1, COPY 1 VECTOR
	LDA TEMP1		;CLEAR INTENSITY FLAG
	AND #4			;BUT KEEP INVERSION BIT
	STA TEMP1
	DEC R5			;COUNT
	BPL 2$			;CONTINUE
	JSR AYTOR0		;RETURN BEAM TO CENTER AT 0 INTENSITY

1$:	JSR CPTSPX
	JSR CPYVEC		;WITH NO INTENSITY CHANGE
	LDA SBTL		;GET INTENSITY
	AND #0F0
	CMP #60			;THERE IS A MINIMUM INTENSITY
	BCS 3$
	LDA #60			;BELOW WHICH IT CAN'T BE SEEN
3$:	ORA TEMP1		;MERGE IN THE X INVERSION BIT
	STA TEMP1
	LDX #SHPVCT-1		;LOAD X WITH VECTOR COUNT-1 (S/B A 5)
	JSR AYTOR0		;ADD Y+1 TO R0, COPY VECTORS
;	JMP THRTST		;DO THRUST TEST

THRTST:
	BIT THRUST		;TRUE?
	BPL TTST		;NO THRUST. EXIT
	LDA FRAME
	AND #4
	BEQ TTST		;FLICKER AT 15HZ
	LDX #1			;ALL THRUSTS ARE ONLY 2 VECTORS
AYTOR0:	TYA			;POINT R0,R1 TO FLAME VECTORS
	SEC			;+1
	ADC R0
	STA R0
	LDA #0
	ADC R1
	STA R1
	JMP CPYVEC		;COPY FLAME VECTORS AND EXIT


CPTSPX:	LDA ANGLE
	SEC
	SBC #40			;PICTURES ARE STORED 90-135 SO BACK UP
	JSR CPXROT		;COMPUTE INDEX INTO ROTATIONS ARRAY
	TYA			;Y COMES BACK POINTING TO WORD
	LSR			;FIX IT TO POINT TO BYTE
	TAY
	LXH SHIPSV		;GET HIGH BYTE OF ADDRESS OF SHIP VECTORS
	LDA Y,SHIPS		;GET OFFSET
	ASL			;*2
	BCC 5$			; X=X+CARRY
	INX
	CLC
5$:	ADC #0			;ADD OFFSET TO ADDRESS
	.=.-1			;  (THIS IS BECAUSE CLUNKY ASSEMBLER CAN'T
	.WORD SHIPSV		;     GLOBAL ARITHMETIC)
	.=.-1
	STA R0			;R0,R1 CONTAIN ADDRESS OF SHIP VECTORS
	TXA
	ADC #0
	STA R1
	LDX #0			;1 VECTOR
TTST:	RTS

	.SBTTL CPXROT OBJECT ORIENTATION INDEX EVALUATOR
;
; AT ENTRY:
; A = ANGLE (0-FF) OF ORIENTAION
;
; AT EXIT:
; (Y) = INDEX TO 1 OF 8 WORDS.
; (R2) = + IF NO X AND Y SWAP, - IF SWAP
; (TEMP1) = MASK FOR X SIGN CHANGE (0 OR 4)
; (TEMP1+1) = MASK FOR Y SIGN CHANGE (0 OR 4)
;
; USES: A,Y,R0,R2

	.ENABL LSB
CPXROT::LSR			;THROW AWAY LOW 2 BITS OF ANGLE
	STA R0			;SAVE RESIDUAL
	LSR
	LSR			;GET THE 1/2 QUADRANT NUMBER
	LSR
	LSR
	TAY
	LDA Y,TABLE		;GET OPERATIONS CODE
	ASL			;PUT NEGATE BIT INTO CARRY
	STA R2			;SAVE RESIDUAL
	LDA R0			;GET ANGLE (/2)
	AND #0E			;ISOLATE PORTION WITHIN 45 DEGREES
	BCC 1$			;NO NEGATE
	EOR #0E			;NEGATE 3 BITS TO 4 BITS
	ADC #1			;(CARRY SET FROM ABOVE)
1$:	TAY			;PASS IT TO USER
	LDA R2			;GET RESIDUAL OPERATIONS BITS
	AND #4			;ISOLATE X MASK
	STA TEMP1		;PASS IT TO USER
	ASL R2			;PLACE SWAP BIT INTO BIT 7
	LDA R2
	AND #4			;ISOLATE Y MASK
	STA TEMP1+1		;PASS IT TO USER
	RTS			;FINI
	.DSABL LSB

; CONTROL TABLE
; BIT 7 - NEGATE PIX SELECT
;     5 - SWAP X WITH Y
;     1 - X SIGN MASK
;     0 - Y SIGN MASK

	.MACRO CT MX,MY,SWAP,PIX
...T	=0
	.IIF NE,MX,...T=...T!2
	.IIF NE,MY,...T=...T!1
	.IIF NE,SWAP,...T=...T!20
	.IIF NE,PIX,...T=...T!80
	.BYTE ...T
	.ENDM

TABLE:	CT 0,0,0,0
	CT 1,1,1,1
	CT 1,0,1,0
	CT 0,1,0,1
	CT 1,1,0,0
	CT 0,0,1,1
	CT 0,1,1,0
	CT 1,0,0,1

	.SBTTL SOUNDS-GENERATE SOUNDS
	.GLOBL SNDON,SND.T1,SND.T2,SNDPON
;SOUNDS-GENERATE SOUNDS
;
SOUNDS:	LSR R0			;ASSUME NO THRUST
	LDX NPLAYR
	BEQ 60$			;ATTRACT. RESET EXPLOSION

; SND3 IS .NE. IF EXTRA LIFE SOUND IS REQUESTED
; HSSND IS .NE. IF DEATH STAR HAS BEEN LAUNCHED

	LDX POINT+7		;CHANNELS 6 AND 7 MUST NOT BE BUSY
	BNE 25$			;NO SUCH LUCK. WAIT UNTIL NEXT TIME
	LDA SND3		;ANY EXTRA LIFE NOISE REQ?
	BEQ 24$			;NOPE
	SND SNDON,EL		;YEP. START IT
	STX SND3		;CLEAR THE FLAG FOR NEXT TIME
	BEQ 25$			; (ALWAYS)

24$:	LDA HSSND		;ANY HI SCORE NOISE REQ?
	BEQ 25$			;NO.
	SND SNDON,DS
	STX HSSND		;CLEAR FLAG FOR NEXT TIME

25$:	LDA SHPPIX		;SHIP?
	BMI 27$			;SHIP IS DESTROYED
	BEQ 27$			;SHIP NOT ON SCREEN YET
	ASL THRUST		;SIGNAL THRUST
	ROR R0
	LDA NROCKS
	BEQ 27$			;IF NOT ROCKS
	LDA THUMP1
	BEQ 30$			;IF THUMP SOUND IS OFF
	DEC THUMP1
	BNE 50$			;LEAVE SOUND ON
27$:	LDA THUMP3
	STA THUMP2		;AT LEAST 8 FRAMES BEFORE ITS ON AGAIN
	BPL 50$			;ALWAYS

30$:	DEC THUMP2
	BNE 50$			;LEAVE SOUND OFF
	LDA I,04
	STA THUMP1		;NUMBER FRAMES FOR SOUND TO BE ON
	INC LTHUMP		;CHEAP WAY TO TOGGLE BIT 0
	LDA LTHUMP
	AND #1			;ISOLATE IT
	TAX
	LDY X,TSS
	JSR SNDPON
50$:	LDA LEXPSND
	TAX
	AND I,3F
	BEQ 60$			;IF NO EXPLOSION VOLUME
	DEX
60$:	STX LEXPSND
	STX A,EXPSND		;SET SOUND FREQUENCY/LEVEL
	LDA R0			;GET THRUST CONTROL
	STA SPTEN		;TURN ON/OFF THRUST SOUND
	RTS
TSS:	.BYTE SND.T1,SND.T2


	.SBTTL SPLIT - SPLIT ROCK INTO FRAGMENTS
	.GLOBL SPLTTP
;SPLIT - SPLIT ROCK INTO FRAGMENTS
;
;ENTRY	(Y)=INDEX OF OBJECT BEING SPLIT
;	(X)=INDEX OF SHIP, SAUCER OR TORPEDO
SPLIT:	STX TEMP3		;SAVE X
	LDA I,50
	STA RTIMER		;RESET TIMER IF ROCK HAS BEEN HIT
	.IF NE, $DTHST
	JMP SPLTTP		;SPLIT TIPS
	.IFF
1$:	LDA Y,OBJ
	AND I,78		;SAVE PICTURE
	ASL
	BPL 2$
	JMP SPLTTP
2$:	LSR
	STA TEMP3+1
	LDA Y,OBJ
	AND I,07
	LSR
	TAX
	BEQ 10$			;EMPTY NOW
	ORA TEMP3+1
10$:	STA Y,OBJ		;NEW PICTURE & SIZE
	LDA NPLAYR
	BEQ 20$			;WE ARE IN ATTRACT
	LDA TEMP3
	BEQ 15$			;SHIP DOES IT
	CMP I,04
	BCC 20$			;NO POINTS IF SAUCER DOES IT
15$:	LDA X,HITSCR		;SCORE FOR HIT
	CLC
	JSR POINTS		;ADD POINTS AND CHECK FOR 10K
20$:	LDX Y,OBJ
	BEQ 90$			;DISAPPEARED
	JSR SEARCH		;SEARCH FOR NEW ENTRY
	BMI 90$			;NO MORE ENTRIES
	INC NROCKS
	JSR CPYPOS		;COPY POSITION FOR NEW ENTRY
	JSR NEWVEL		;NEW VELOCITY
	LDA X,XINC
	AND I,1F
	ASL
	EOR X,OBJXL
	STA X,OBJXL		;PREVENT OVERLAPING ROCKS
	JSR SEARC1		;LOOK FOR NEW ENTRY
	BMI 90$			;NO MORE ROOM
	INC NROCKS
	JSR CPYPOS		;COPY POSITION & PICTURE + VELOCITY
	JSR NEWVEL		;NEW VELOCITY USING OLD
	LDA X,YINC
	AND I,1F
	ASL
	EOR X,OBJYL
	STA X,OBJYL
90$:	LDX TEMP3
	RTS

	ENTSEC
HITSCR:	.BYTE 10,5,2		;SCORES FOR HITTING SMALL, MEDIUM & LARGE ROCKS
	XITSEC
	
	
	.ENDC
	.SBTTL UPDATE-UPDATE HIGH SCORE TABLE
	.GLOBL VGRCPT
;UPDATE-UPDATE HIGH SCORE TABLE
;
UPDATE:	LDA NPLAYR
	BPL 90$			;FRAME AFTER END OF GAME (A=-1)
	STA FRAME+1		;PUT UP HIGH SCORE TABLE NEXT
	STA UPDFLG
	STA UPDFLG+1		;CLEAR FLAGS
	STA EAHSX
	JSR INISOU		;RESET SOUNDS
	LDX #3			;PLAYER SCORE INDEX
18$:	LDY I,0			;INDEX INTO HIGH SCORE TABLE
20$:	LDA Y,HSCORE
	CMP X,SCORE		;SETS CARRY
	LDA Y,HSCORE+1
	SBC X,SCORE+1
	LDA Y,HSCORE+2
	SBC X,SCORE+2
	BCC 30$			;NEW HIGH SCORE
25$:	INY
	INY
	INY
	CPY I,3*10.
	BCC 20$			;LOOP FOR 10 ENTRIES
28$:	DEX
	DEX
	DEX
	BPL 18$			;NEXT PLAYER
	LDA UPDFLG+1
	BMI 29$			;NO PLAYER 2 HIGH SCORE
	CMP UPDFLG
	BCC 29$			;IF PLAYER 2 SCORE IS BETTER THAN PLAYER 1
	ADC I,02		;ADD 3
	CMP I,3*10.
	BCC 27$			;IF NOT OUT OF TABLE NOW
	LDA I,-1
27$:	STA UPDFLG+1		;NEW INDEX
29$:	LDX EAHSX		;ON THE HIGH SCORE TABLE?
	BMI 99$			;NO
	SND SNDON,HT		;NOISE
	LDA CRMERR		;COPYRIGHT ERROR?
	BEQ 97$			;NOPE
	LDA #85.		;1 OUT OF 3 TIMES
	CMP RANDOM		;  GIVE THE GUY 2
	BCC 97$
	INC $$CRDT		;    FREE GAMES
	INC $$CRDT
97$:	TXA
	BNE 99$
	SEC
	ROR CPMTST
	JSR VGRCPT		;TEST
	LSR CPMTST
99$:	LDA I,0
	STA NPLAYR		;FLAG DONE WITH UPDATE
	STA UPDINT		;STARTING WITH FIRST INITIAL
90$:	RTS
	
30$:	STX TEMP2		;SAVE INDEX
	TXA
	LSR
	TAX			;0 OR 1
	STY X,UPDFLG		;FLAG TO GET PLAYERS INITIALS
	STY R0			;SAVE IT HERE TOO
	CPY EAHSX		;KEEP LOWER OF 2
	BCS 31$			;NOT LOWER
	STY EAHSX
	LDA #0			;CLEAR R1
	STA R1
	TYA			;GET ENTRY INDEX
33$:	SEC			;DIVIDE BY 3
	SBC #3
	BCC 32$
	INC R1
	BNE 33$			;(ALWAYS)
	
32$:	LDA R1			;GET QUO
	EOR #-1			;NEGATE IT
	ADC #4			;A=[3-(ENTRY/3)]*7
	STA R1
	ASL R1
	ADC R1
	ASL R1
	ADC R1
	STA EABC		;KEEP BYTE COUNT
	LDA #20.		;START @ END
	STA EAX
31$:	LDX I,3*10.-3
40$:	CPX R0
	BEQ 45$			;IF END OF COPY
	LDA X,INITL-3		;COPY INITIALS DOWN
	STA X,INITL
	LDA X,INITL-2
	STA X,INITL+1
	LDA X,INITL-1
	STA X,INITL+2
	LDA X,HSCORE-3		;COPY SCORES DOWN
	STA X,HSCORE
	LDA X,HSCORE-2
	STA X,HSCORE+1
	LDA X,HSCORE-1
	STA X,HSCORE+2
	DEX
	DEX
	DEX
	BNE 40$			;LOOP UNTIL X=0 OR DONE
45$:	LDA I,11.
	STA X,INITL		;START LETTERS AT A
	LDA I,0			;CLEARS SECOND AND THIRD INITIALS
	STA X,INITL+1
	STA X,INITL+2
	LDA I,0F0		;1 MINUTE AT 60HZ
	STA FRAME+1		;PREPARE TO TIMEOUT GETTING INITIALS
	LDX TEMP2		;LOOP FOR NEXT PLAYER
	LDA X,SCORE+2
	STA Y,HSCORE+2
	LDA X,SCORE+1
	STA Y,HSCORE+1
	LDA X,SCORE
	STA Y,HSCORE
	JMP 28$
	.PAGE
;ATAN-ARCTANGENT
;
;ENTRY	(X)=X PART OF ARCTAN (Y/X) (SIGNED NUMBER)
;	(Y)=Y PART (SIGNED NUMBER)
;EXIT	(A)=ARCTAN RESULT (0 TO FF, 40=90 DEGREES)
;USES	A,X,Y,(TEMP2,TEMP2+1)
ATAN::	TYA
	BPL ATAN1		;IF Y>-0
	JSR COMP		;+Y=-Y
	JSR ATAN1		;ATAN (-Y/X)
	JMP COMP		;ARCTAN(Y/X)=-ARCTAN(-Y/X)
		
ATAN1:	TAY			;DIVISOR
	TXA
	BPL ATAN2		;IF X=-0
	JSR COMP		;X=-X
	JSR ATAN2		;ATAN(Y/-X)
	EOR I,80		;ARCTAN(Y/X)=80-ARTCAN(Y/-X)
;	JMP COMP
	
	
;COMP-COMPLEMENT ACCUMULATOR
;
;ENTRY	(A)=VALUE TO BE COMPLEMENTED
;EXIT	(A)=ANSWER
;USES	A
COMP::	EOR I,0FF
	CLC
	ADC I,01
	RTS

ATAN2:	STA TEMP2+1		;DIVISOR (X)
	TYA			;DIVIDEND (Y)
	CMP TEMP2+1
	BCC ATAN3		;IF Y<X USE ARCTAN ON 45 DEGREE SECTOR
	LDY TEMP2+1		;ELSE USE ARCCOT
	STA TEMP2+1
	TYA
	JSR ATAN3		;ARCTAN (X/Y)
	SEC
	SBC I,40
	JMP COMP		;ARCTAN (Y/X)=40-ARCTAN(X/Y)
		
ATAN3:	JSR DIVIDE		;4 BIT DIVIDE
	TAX
	LDA X,ATANA		;TABLE LOOKUP
	RTS
	
ATANA:	.BYTE 0,2,5,7		;0-3
	.BYTE 10.,12.,15.,17.	;4-7
	.BYTE 19.,21.,23.,25.	;8-B
	.BYTE 26.,28.,29.,31.	;C-F
	.BYTE 32.		;10
CKSUM4:	.BYTE 0		;CHECKSUM 7000-77FF
	
	.PAGE
	.CSECT CASTST
; DISPLAY BONUS LIFE SCORE REQUIREMENT
BONDSP::
	LDA #BONSCR		;POINT TO BONUS SCORE VALUE
	LDY #3			;3 BYTES OF BINARY
	SEC			;SUPPRESS LEADING ZEROES
;	JMP DIGITS		;DISPLAY NUMBER

;DIGITS - DISPLAY 2Y DIGIT NUMBERS
;
;ENTRY	(C) = CARRY SET FOR ZERO SUPPRESSION
;	(A) = ADDRESS OF (Y) ZERO PAGE LOCATIONS CONTAINING NUMBER (LSB TO MSB)
;	(Y) = NUMBER OF ZERO PAGE LOCATIONS TO USE (1 TO 127).
;USES	A,X,Y (TEMP4,TEMP4+2)
DIGITS::PHP			;SAVE INPUT PARAMETERS
	STX TEMP4+2
	DEY
	STY TEMP4+1
	CLC
	ADC TEMP4+1
	STA TEMP4		;MSB OF DIGITS
	PLP
	TAX
10$:	PHP
	LDA X,0
	LSR
	LSR
	LSR
	LSR
	PLP
	JSR VGHEXZ		;FIRST DIGIT
	LDA TEMP4+1
	BNE 20$
	CLC			;DISPLAY LAST DIGIT (EVEN 0)
20$:	LDX TEMP4
	LDA X,0
	JSR VGHEXZ		;SECOND DIGIT
	DEC TEMP4
	LDX TEMP4
	DEC TEMP4+1
	BPL 10$			;LOOP FOR EACH SET OF DIGITS
	RTS
	.ASECT
	.PAGE
	.SBTTL DIVIDE/SIN/COS ROUTINES
;DIVIDE-4 BIT RESULT DIVIDE
;
;ENTRY (A)=DIVIDEND (UNSIGNED)
;      (TEMP2+1)=DIVISOR (UNSIGNED)
;EXIT	(A)=QUOTIENT (5 BITS, 0-10)

DIVIDE::LDY #4		;5 BITS OF QUOTIENT
10$:	CMP TEMP2+1		;DIVISOR BIGGER?
	BCC 20$			;YES
	SBC TEMP2+1		;NO. TAKE 1 (LEAVES C=1)
20$:	ROL TEMP2		;SAVE QUOTIENT BIT
	ASL			;MOVE DIVIDEND
	DEY			;COUNT
	BPL 10$			;CONTINUE
	LDA TEMP2
	AND I,1F		;5 BITS OF RESULTS
	RTS

;COS-COSINE
;ENTRY	=ANGLE (0 TO FF)
;EXIT	(A)=COSINE(-127,127)
COS::	CLC			;COS(A)=SIN(A+PI/2)
	ADC I,40
;	JMP SIN
	
	
;SIN-SINE
;
;ENTRY	(A)=ANGLE (0 TO FF REPRESENTS 0 TO 360 DEGREES)
;	(CC)=MINUS/PLUS FLAG SET CORRECTLY
;EXIT	(A)=SINE (-127 TO +127)
;USES	A,X
SIN::	BPL SIN1		;IF PI > ANGLE >-0
	AND I,7F
	JSR SIN1		;SIN(A) WHEN PI > A >= 0
	JMP COMP		;SIN(PI+A)=-SIN(A)

SIN1:	CMP I,41
	BCC 10$			;PI/2 >- ANGLE >- 0
	EOR I,7F		;SIN(PI/2+A)=SIN(PI/2-A)
	ADC I,0			;ADD 1
10$:	TAX
	LDA AX,SINCOS
	RTS
	
	.END


                                                                                                                                        